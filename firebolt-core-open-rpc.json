{
	"openrpc": "1.2.4",
	"info": {
		"title": "Firebolt Core SDK",
		"version": "",
		"x-module-descriptions": {
			"Internal": "Internal methods for SDK / FEE integration",
			"Accessibility": "The `Accessibility` module provides access to the user/device settings for closed captioning and voice guidance.\n\nApps **SHOULD** attempt o respect these settings, rather than manage and persist seprate settings, which would be different per-app.",
			"Account": "A module for querying about the device account.",
			"Advertising": "A module for platform provided advertising settings and functionality.",
			"Authentication": "A module for acquiring authentication tokens.",
			"Capabilities": "The Capabilities module provides information about which discreet unit of functionality is enabled for the apps.",
			"Device": "A module for querying about the device and it's capabilities.",
			"Discovery": "Your App likely wants to integrate with the Platform's discovery capabilities. For example to add a \"Watch Next\" tile that links to your app from the platform's home screen.\n\nGetting access to this information requires to connect to lower level APIs made available by the platform. Since implementations differ between operators and platforms, the Firebolt SDK offers a Discovery module, that exposes a generic, agnostic interface to the developer.\n\nUnder the hood, an underlaying transport layer will then take care of calling the right APIs for the actual platform implementation that your App is running on.\n\nThe Discovery plugin is used to _send_ information to the Platform.\n\n### Localization\nApps should provide all user-facing strings in the device's language, as specified by the Firebolt `Localization.language` property.\n\nApps should provide prices in the same currency presented in the app. If multiple currencies are supported in the app, the app should provide prices in the user's current default currency.",
			"Keyboard": "Methods for prompting users to enter text with task-oriented UX",
			"Lifecycle": "Methods and events for responding to lifecycle changes in your app",
			"Localization": "Methods for accessessing location and language preferences",
			"Metrics": "Methods for sending metrics",
			"Parameters": "Methods for getting initialization parameters for an app cold launch.",
			"Profile": "Methods for getting information about the current user/account profile",
			"SecondScreen": "Methods for communicating with second screen devices",
			"SecureStorage": "A module for storing and retrieving secure data owned by the app"
		}
	},
	"methods": [
		{
			"name": "Accessibility.closedCaptions",
			"summary": "Get the user's preferred closed-captions settings",
			"params": [],
			"tags": [
				{
					"name": "deprecated",
					"x-alternative": "Accessibility.closedCaptionsSettings()",
					"x-since": "0.6.0"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:accessibility:closedcaptions"
					]
				}
			],
			"result": {
				"name": "closedCaptionsSettings",
				"summary": "the closed captions settings",
				"schema": {
					"$ref": "https://meta.rdkcentral.com/firebolt/schemas/accessibility#/definitions/ClosedCaptionsSettings"
				}
			},
			"examples": [
				{
					"name": "Getting the closed captions settings",
					"params": [],
					"result": {
						"name": "settings",
						"value": {
							"enabled": true,
							"styles": {
								"fontFamily": "monospaced_sanserif",
								"fontSize": 1,
								"fontColor": "#ffffff",
								"fontEdge": "none",
								"fontEdgeColor": "#7F7F7F",
								"fontOpacity": 100,
								"backgroundColor": "#000000",
								"backgroundOpacity": 100,
								"textAlign": "center",
								"textAlignVertical": "middle",
								"windowColor": "white",
								"windowOpacity": 50
							},
							"preferredLanguages": [
								"eng",
								"spa"
							]
						}
					}
				}
			]
		},
		{
			"name": "Accessibility.closedCaptionsSettings",
			"summary": "Get the user's preferred closed-captions settings",
			"params": [],
			"tags": [
				{
					"name": "property:readonly"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:accessibility:closedcaptions"
					]
				}
			],
			"result": {
				"name": "closedCaptionsSettings",
				"summary": "the closed captions settings",
				"schema": {
					"$ref": "https://meta.rdkcentral.com/firebolt/schemas/accessibility#/definitions/ClosedCaptionsSettings"
				}
			},
			"examples": [
				{
					"name": "Getting the closed captions settings",
					"params": [],
					"result": {
						"name": "settings",
						"value": {
							"enabled": true,
							"styles": {
								"fontFamily": "monospaced_sanserif",
								"fontSize": 1,
								"fontColor": "#ffffff",
								"fontEdge": "none",
								"fontEdgeColor": "#7F7F7F",
								"fontOpacity": 100,
								"backgroundColor": "#000000",
								"backgroundOpacity": 100,
								"textAlign": "center",
								"textAlignVertical": "middle",
								"windowColor": "white",
								"windowOpacity": 50
							},
							"preferredLanguages": [
								"eng",
								"spa"
							]
						}
					}
				}
			]
		},
		{
			"name": "Accessibility.highContrastUI",
			"summary": "The user's preference for a high-contrast UI",
			"params": [],
			"tags": [
				{
					"name": "property:readonly"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:accessibility:highcontrastui"
					]
				}
			],
			"result": {
				"name": "highContrastUI",
				"summary": "Whether high-contrast UI mode is enabled",
				"schema": {
					"type": "boolean"
				}
			},
			"examples": [
				{
					"name": "High-contrast UI mode is enabled",
					"params": [],
					"result": {
						"name": "Default Result",
						"value": true
					}
				}
			]
		},
		{
			"name": "Accessibility.voiceGuidance",
			"summary": "Get the user's preferred voice guidance settings",
			"params": [],
			"tags": [
				{
					"name": "deprecated",
					"x-alternative": "Accessibility.voiceGuidanceSettings()",
					"x-since": "0.6.0"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:accessibility:voiceguidance"
					]
				}
			],
			"result": {
				"name": "settings",
				"summary": "the voice guidance settings",
				"schema": {
					"$ref": "https://meta.rdkcentral.com/firebolt/schemas/accessibility#/definitions/VoiceGuidanceSettings"
				}
			},
			"examples": [
				{
					"name": "Getting the voice guidance settings",
					"params": [],
					"result": {
						"name": "Default Result",
						"value": {
							"enabled": true,
							"navigationHints": true,
							"rate": 1
						}
					}
				}
			]
		},
		{
			"name": "Accessibility.voiceGuidanceSettings",
			"summary": "Get the user's preferred voice guidance settings",
			"params": [],
			"tags": [
				{
					"name": "property:readonly"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:accessibility:voiceguidance"
					]
				}
			],
			"result": {
				"name": "settings",
				"summary": "the voice guidance settings",
				"schema": {
					"$ref": "https://meta.rdkcentral.com/firebolt/schemas/accessibility#/definitions/VoiceGuidanceSettings"
				}
			},
			"examples": [
				{
					"name": "Getting the voice guidance settings",
					"params": [],
					"result": {
						"name": "Default Result",
						"value": {
							"enabled": true,
							"navigationHints": true,
							"rate": 1
						}
					}
				}
			]
		},
		{
			"name": "Accessibility.audioDescriptionSettings",
			"summary": "Get the user's preferred audio description settings",
			"params": [],
			"tags": [
				{
					"name": "property:readonly"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:accessibility:audiodescriptions"
					]
				}
			],
			"result": {
				"name": "settings",
				"summary": "the audio description settings",
				"schema": {
					"$ref": "#/components/schemas/Accessibility.AudioDescriptionSettings"
				}
			},
			"examples": [
				{
					"name": "Getting the audio description settings",
					"params": [],
					"result": {
						"name": "Default Result",
						"value": {
							"enabled": true
						}
					}
				}
			]
		},
		{
			"name": "Accessibility.onClosedCaptionsSettingsChanged",
			"summary": "Get the user's preferred closed-captions settings",
			"params": [
				{
					"name": "listen",
					"schema": {
						"type": "boolean"
					}
				}
			],
			"tags": [
				{
					"name": "event",
					"x-notifier": "Accessibility.closedCaptionsSettingsChanged",
					"x-subscriber-for": "Accessibility.closedCaptionsSettings"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:accessibility:closedcaptions"
					]
				}
			],
			"examples": [
				{
					"name": "Getting the closed captions settings",
					"params": [
						{
							"name": "listen",
							"value": true
						}
					],
					"result": {
						"name": "result",
						"value": null
					}
				}
			],
			"result": {
				"name": "result",
				"schema": {
					"type": "null"
				}
			}
		},
		{
			"name": "Accessibility.onHighContrastUIChanged",
			"summary": "The user's preference for a high-contrast UI",
			"params": [
				{
					"name": "listen",
					"schema": {
						"type": "boolean"
					}
				}
			],
			"tags": [
				{
					"name": "event",
					"x-notifier": "Accessibility.highContrastUIChanged",
					"x-subscriber-for": "Accessibility.highContrastUI"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:accessibility:highcontrastui"
					]
				}
			],
			"examples": [
				{
					"name": "High-contrast UI mode is enabled",
					"params": [
						{
							"name": "listen",
							"value": true
						}
					],
					"result": {
						"name": "result",
						"value": null
					}
				}
			],
			"result": {
				"name": "result",
				"schema": {
					"type": "null"
				}
			}
		},
		{
			"name": "Accessibility.onVoiceGuidanceSettingsChanged",
			"summary": "Get the user's preferred voice guidance settings",
			"params": [
				{
					"name": "listen",
					"schema": {
						"type": "boolean"
					}
				}
			],
			"tags": [
				{
					"name": "event",
					"x-notifier": "Accessibility.voiceGuidanceSettingsChanged",
					"x-subscriber-for": "Accessibility.voiceGuidanceSettings"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:accessibility:voiceguidance"
					]
				}
			],
			"examples": [
				{
					"name": "Getting the voice guidance settings",
					"params": [
						{
							"name": "listen",
							"value": true
						}
					],
					"result": {
						"name": "result",
						"value": null
					}
				}
			],
			"result": {
				"name": "result",
				"schema": {
					"type": "null"
				}
			}
		},
		{
			"name": "Accessibility.onAudioDescriptionSettingsChanged",
			"summary": "Get the user's preferred audio description settings",
			"params": [
				{
					"name": "listen",
					"schema": {
						"type": "boolean"
					}
				}
			],
			"tags": [
				{
					"name": "event",
					"x-notifier": "Accessibility.audioDescriptionSettingsChanged",
					"x-subscriber-for": "Accessibility.audioDescriptionSettings"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:accessibility:audiodescriptions"
					]
				}
			],
			"examples": [
				{
					"name": "Getting the audio description settings",
					"params": [
						{
							"name": "listen",
							"value": true
						}
					],
					"result": {
						"name": "result",
						"value": null
					}
				}
			],
			"result": {
				"name": "result",
				"schema": {
					"type": "null"
				}
			}
		},
		{
			"name": "Account.id",
			"summary": "Get the platform back-office account identifier",
			"params": [],
			"tags": [
				{
					"name": "property:immutable"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:account:id"
					]
				}
			],
			"result": {
				"name": "id",
				"summary": "the id",
				"schema": {
					"type": "string"
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [],
					"result": {
						"name": "Default Result",
						"value": "123"
					}
				}
			]
		},
		{
			"name": "Account.uid",
			"summary": "Gets a unique id for the current app & account",
			"params": [],
			"tags": [
				{
					"name": "property:immutable"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:account:uid"
					]
				}
			],
			"result": {
				"name": "uniqueId",
				"summary": "a unique ID",
				"schema": {
					"type": "string"
				}
			},
			"examples": [
				{
					"name": "Getting the unique ID",
					"params": [],
					"result": {
						"name": "Default Result",
						"value": "ee6723b8-7ab3-462c-8d93-dbf61227998e"
					}
				}
			]
		},
		{
			"name": "Advertising.config",
			"summary": "Build configuration object for Ad Framework initialization",
			"tags": [
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:advertising:configuration"
					]
				}
			],
			"params": [
				{
					"name": "options",
					"summary": "Configuration options",
					"required": true,
					"schema": {
						"$ref": "#/components/schemas/Advertising.AdConfigurationOptions"
					}
				}
			],
			"result": {
				"name": "adFrameworkConfig",
				"summary": "the ad framework config",
				"schema": {
					"type": "object",
					"description": "An opaque object represneting the AdConfiguration"
				}
			},
			"examples": [
				{
					"name": "Initializing the Ad Framework",
					"params": [
						{
							"name": "options",
							"value": {
								"environment": "prod",
								"authenticationEntity": "MVPD"
							}
						}
					],
					"result": {
						"name": "Default Result",
						"value": {
							"adServerUrl": "https://demo.v.fwmrm.net/ad/p/1",
							"adServerUrlTemplate": "https://demo.v.fwmrm.net/ad/p/1?flag=+sltp+exvt+slcb+emcr+amcb+aeti&prof=12345:caf_allinone_profile &nw=12345&mode=live&vdur=123&caid=a110523018&asnw=372464&csid=gmott_ios_tablet_watch_live_ESPNU&ssnw=372464&vip=198.205.92.1&resp=vmap1&metr=1031&pvrn=12345&vprn=12345&vcid=1X0Ce7L3xRWlTeNhc7br8Q%3D%3D",
							"adNetworkId": "519178",
							"adProfileId": "12345:caf_allinone_profile",
							"adSiteSectionId": "caf_allinone_profile_section",
							"adOptOut": true,
							"privacyData": "ew0KICAicGR0IjogImdkcDp2MSIsDQogICJ1c19wcml2YWN5IjogIjEtTi0iLA0KICAibG10IjogIjEiIA0KfQ0K",
							"ifaValue": "01234567-89AB-CDEF-GH01-23456789ABCD",
							"ifa": "ewogICJ2YWx1ZSI6ICIwMTIzNDU2Ny04OUFCLUNERUYtR0gwMS0yMzQ1Njc4OUFCQ0QiLAogICJpZmFfdHlwZSI6ICJzc3BpZCIsCiAgImxtdCI6ICIwIgp9Cg==",
							"appName": "FutureToday",
							"appBundleId": "FutureToday.comcast",
							"distributorAppId": "1001",
							"deviceAdAttributes": "ewogICJib0F0dHJpYnV0ZXNGb3JSZXZTaGFyZUlkIjogIjEyMzQiCn0=",
							"coppa": 0,
							"authenticationEntity": "60f72475281cfba3852413bd53e957f6"
						}
					}
				}
			]
		},
		{
			"name": "Advertising.policy",
			"summary": "Get the advertising privacy and playback policy",
			"params": [],
			"tags": [
				{
					"name": "property:readonly"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:privacy:advertising",
						"xrn:firebolt:capability:advertising:configuration"
					]
				}
			],
			"result": {
				"name": "adPolicy",
				"summary": "the ad policy",
				"schema": {
					"$ref": "#/components/schemas/Advertising.AdPolicy"
				}
			},
			"examples": [
				{
					"name": "Getting the advertising policy settings",
					"params": [],
					"result": {
						"name": "Default Result",
						"value": {
							"skipRestriction": "adsUnwatched",
							"limitAdTracking": false
						}
					}
				}
			]
		},
		{
			"name": "Advertising.advertisingId",
			"tags": [
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:advertising:identifier"
					]
				}
			],
			"summary": "Get the advertising ID",
			"params": [
				{
					"name": "options",
					"summary": "AdvertisingId options",
					"required": false,
					"schema": {
						"$ref": "#/components/schemas/Advertising.AdvertisingIdOptions"
					}
				}
			],
			"result": {
				"name": "advertisingId",
				"summary": "the advertising ID",
				"schema": {
					"type": "object",
					"properties": {
						"ifa": {
							"type": "string"
						},
						"ifa_type": {
							"type": "string"
						},
						"lmt": {
							"type": "string"
						}
					},
					"required": [
						"ifa"
					]
				}
			},
			"examples": [
				{
					"name": "Getting the advertising ID",
					"params": [],
					"result": {
						"name": "Default Result",
						"value": {
							"ifa": "01234567-89AB-CDEF-GH01-23456789ABCD",
							"ifa_type": "idfa",
							"lmt": "0"
						}
					}
				},
				{
					"name": "Getting the advertising ID with scope browse",
					"params": [
						{
							"name": "options",
							"value": {
								"scope": {
									"type": "browse",
									"id": "paidPlacement"
								}
							}
						}
					],
					"result": {
						"name": "Default Result",
						"value": {
							"ifa": "01234567-89AB-CDEF-GH01-23456789ABCD",
							"ifa_type": "idfa",
							"lmt": "0"
						}
					}
				},
				{
					"name": "Getting the advertising ID with scope content",
					"params": [
						{
							"name": "options",
							"value": {
								"scope": {
									"type": "content",
									"id": "metadata:linear:station:123"
								}
							}
						}
					],
					"result": {
						"name": "Default Result",
						"value": {
							"ifa": "01234567-89AB-CDEF-GH01-23456789ABCD",
							"ifa_type": "idfa",
							"lmt": "0"
						}
					}
				}
			]
		},
		{
			"name": "Advertising.deviceAttributes",
			"tags": [
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:advertising:configuration"
					]
				}
			],
			"summary": "Get the device advertising device attributes",
			"params": [],
			"result": {
				"name": "deviceAttributes",
				"summary": "the device attributes",
				"schema": {
					"type": "object"
				}
			},
			"examples": [
				{
					"name": "Getting the device attributes",
					"params": [],
					"result": {
						"name": "Default Result",
						"value": {}
					}
				}
			]
		},
		{
			"name": "Advertising.appBundleId",
			"tags": [
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:advertising:configuration"
					]
				}
			],
			"summary": "Get the App's Bundle ID",
			"params": [],
			"result": {
				"name": "appBundleId",
				"summary": "the app bundle ID",
				"schema": {
					"type": "string"
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [],
					"result": {
						"name": "Default Result",
						"value": "operator.app"
					}
				}
			]
		},
		{
			"name": "Advertising.onPolicyChanged",
			"summary": "Get the advertising privacy and playback policy",
			"params": [
				{
					"name": "listen",
					"schema": {
						"type": "boolean"
					}
				}
			],
			"tags": [
				{
					"name": "event",
					"x-notifier": "Advertising.policyChanged",
					"x-subscriber-for": "Advertising.policy"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:privacy:advertising",
						"xrn:firebolt:capability:advertising:configuration"
					]
				}
			],
			"examples": [
				{
					"name": "Getting the advertising policy settings",
					"params": [
						{
							"name": "listen",
							"value": true
						}
					],
					"result": {
						"name": "result",
						"value": null
					}
				}
			],
			"result": {
				"name": "result",
				"schema": {
					"type": "null"
				}
			}
		},
		{
			"name": "Authentication.token",
			"summary": "Get a specific `type` of authentication token",
			"tags": [
				{
					"name": "deprecated",
					"x-alternative": "Authentication module has individual methods for each token type.",
					"x-since": "0.9.0"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:token:platform"
					]
				}
			],
			"params": [
				{
					"name": "type",
					"summary": "What type of token to get",
					"schema": {
						"$ref": "#/components/schemas/Authentication.TokenType"
					},
					"required": true
				},
				{
					"name": "options",
					"summary": "Additional options for acquiring the token.",
					"schema": {
						"type": "object"
					},
					"required": false
				}
			],
			"result": {
				"name": "token",
				"summary": "the token value, type, and expiration",
				"schema": {
					"type": "object",
					"properties": {
						"value": {
							"type": "string"
						},
						"expires": {
							"type": "string",
							"format": "date-time"
						},
						"type": {
							"type": "string"
						}
					},
					"required": [
						"value"
					]
				}
			},
			"examples": [
				{
					"name": "Acquire a Firebolt platform token",
					"params": [
						{
							"name": "type",
							"value": "platform"
						}
					],
					"result": {
						"name": "token",
						"value": {
							"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c",
							"expires": "2022-04-23T18:25:43.511Z",
							"type": "platform"
						}
					}
				},
				{
					"name": "Acquire a Firebolt device identity token",
					"params": [
						{
							"name": "type",
							"value": "device"
						}
					],
					"result": {
						"name": "token",
						"value": {
							"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c",
							"expires": "2022-04-23T18:25:43.511Z",
							"type": "device"
						}
					}
				},
				{
					"name": "Acquire a Firebolt distributor token",
					"params": [
						{
							"name": "type",
							"value": "distributor"
						},
						{
							"name": "options",
							"value": {
								"clientId": "xyz"
							}
						}
					],
					"result": {
						"name": "token",
						"value": {
							"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c",
							"expires": "2022-04-23T18:25:43.511Z",
							"type": "distributor",
							"data": {
								"tid": "EB00E9230AB2A35F57DB4EFDDC4908F6446D38F08F4FF0BD57FE6A61E21EEFD9",
								"scope": "scope"
							}
						}
					}
				}
			]
		},
		{
			"name": "Authentication.device",
			"summary": "Get a device token scoped to the current app.",
			"tags": [
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:token:device"
					]
				}
			],
			"params": [],
			"result": {
				"name": "token",
				"summary": "the token value and expiration",
				"schema": {
					"type": "string"
				}
			},
			"examples": [
				{
					"name": "Acquire a Firebolt device identity token",
					"params": [],
					"result": {
						"name": "token",
						"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
					}
				}
			]
		},
		{
			"name": "Authentication.session",
			"summary": "Get a destributor session token.",
			"tags": [
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:token:session"
					]
				}
			],
			"params": [],
			"result": {
				"name": "token",
				"summary": "the token value",
				"schema": {
					"type": "string"
				}
			},
			"examples": [
				{
					"name": "Acquire a distributor session token",
					"params": [],
					"result": {
						"name": "token",
						"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
					}
				}
			]
		},
		{
			"name": "Authentication.root",
			"summary": "Get a root device token.",
			"tags": [
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:token:root"
					]
				}
			],
			"params": [],
			"result": {
				"name": "token",
				"summary": "the token value",
				"schema": {
					"type": "string"
				}
			},
			"examples": [
				{
					"name": "Acquire a Firebolt root device identity token",
					"params": [],
					"result": {
						"name": "token",
						"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
					}
				}
			]
		},
		{
			"name": "Capabilities.supported",
			"summary": "Returns whether the platform supports the passed capability.",
			"tags": [
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:capabilities:info"
					]
				}
			],
			"params": [
				{
					"name": "capability",
					"required": true,
					"schema": {
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/capabilities#/definitions/Capability"
					}
				}
			],
			"result": {
				"name": "supported",
				"summary": "Whether or not capability is supported in device.",
				"schema": {
					"type": "boolean"
				}
			},
			"examples": [
				{
					"name": "Wifi scan supported capability",
					"params": [
						{
							"name": "capability",
							"value": "xrn:firebolt:capability:wifi:scan"
						}
					],
					"result": {
						"name": "Default Result",
						"value": true
					}
				},
				{
					"name": "BLE protocol unsupported capability",
					"params": [
						{
							"name": "capability",
							"value": "xrn:firebolt:capability:protocol:bluetoothle"
						}
					],
					"result": {
						"name": "Default Result",
						"value": false
					}
				}
			]
		},
		{
			"name": "Capabilities.available",
			"summary": "Returns whether a capability is available now.",
			"tags": [
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:capabilities:info"
					]
				}
			],
			"params": [
				{
					"name": "capability",
					"required": true,
					"schema": {
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/capabilities#/definitions/Capability"
					}
				}
			],
			"result": {
				"name": "available",
				"summary": "Whether or not capability is available now.",
				"schema": {
					"type": "boolean"
				}
			},
			"examples": [
				{
					"name": "Device Token.",
					"params": [
						{
							"name": "capability",
							"value": "xrn:firebolt:capability:token:device"
						}
					],
					"result": {
						"name": "Default Result",
						"value": true
					}
				},
				{
					"name": "Unavailable Platform token.",
					"params": [
						{
							"name": "capability",
							"value": "xrn:firebolt:capability:token:platform"
						}
					],
					"result": {
						"name": "Default Result",
						"value": false
					}
				}
			]
		},
		{
			"name": "Capabilities.permitted",
			"summary": "Returns whether the current App has permission to the passed capability and role.",
			"tags": [
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:capabilities:info"
					]
				}
			],
			"params": [
				{
					"name": "capability",
					"required": true,
					"schema": {
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/capabilities#/definitions/Capability"
					}
				},
				{
					"name": "options",
					"summary": "Capability options",
					"schema": {
						"$ref": "#/components/schemas/Capabilities.CapabilityOption"
					}
				}
			],
			"result": {
				"name": "permitted",
				"summary": "Whether or not app is permitted for the given capability and the role",
				"schema": {
					"type": "boolean"
				}
			},
			"examples": [
				{
					"name": "Keyboard",
					"params": [
						{
							"name": "capability",
							"value": "xrn:firebolt:capability:input:keyboard"
						}
					],
					"result": {
						"name": "Default Result",
						"value": true
					}
				},
				{
					"name": "Keyboard incorrect manage role capability",
					"params": [
						{
							"name": "capability",
							"value": "xrn:firebolt:capability:input:keyboard"
						},
						{
							"name": "options",
							"value": {
								"role": "manage"
							}
						}
					],
					"result": {
						"name": "Default Result",
						"value": false
					}
				},
				{
					"name": "Wifi scan not permitted capability",
					"params": [
						{
							"name": "capability",
							"value": "xrn:firebolt:capability:wifi:scan"
						}
					],
					"result": {
						"name": "Default Result",
						"value": false
					}
				}
			]
		},
		{
			"name": "Capabilities.granted",
			"summary": "Returns whether the current App has a user grant for passed capability and role.",
			"tags": [
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:capabilities:info"
					]
				}
			],
			"params": [
				{
					"name": "capability",
					"required": true,
					"schema": {
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/capabilities#/definitions/Capability"
					}
				},
				{
					"name": "options",
					"summary": "Capability options",
					"schema": {
						"$ref": "#/components/schemas/Capabilities.CapabilityOption"
					}
				}
			],
			"result": {
				"name": "granted",
				"summary": "Whether or not app is granted to use the given capability and the role",
				"schema": {
					"oneOf": [
						{
							"type": "boolean"
						},
						{
							"const": null
						}
					]
				}
			},
			"examples": [
				{
					"name": "Default capabilities without grants.",
					"params": [
						{
							"name": "capability",
							"value": "xrn:firebolt:capability:input:keyboard"
						}
					],
					"result": {
						"name": "Default Result",
						"value": true
					}
				},
				{
					"name": "Get Postal code without grants.",
					"params": [
						{
							"name": "capability",
							"value": "xrn:firebolt:capability:localization:postal-code"
						}
					],
					"result": {
						"name": "Default Result",
						"value": false
					}
				},
				{
					"name": "Get Postal code with grants.",
					"params": [
						{
							"name": "capability",
							"value": "xrn:firebolt:capability:localization:postal-code"
						}
					],
					"result": {
						"name": "Default Result",
						"value": null
					}
				}
			]
		},
		{
			"name": "Capabilities.info",
			"summary": "Returns an array of CapabilityInfo objects for the passed in capabilities.",
			"tags": [
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:capabilities:info"
					]
				}
			],
			"params": [
				{
					"name": "capabilities",
					"required": true,
					"schema": {
						"type": "array",
						"items": {
							"$ref": "https://meta.rdkcentral.com/firebolt/schemas/capabilities#/definitions/Capability"
						},
						"minItems": 1
					}
				}
			],
			"result": {
				"name": "info",
				"summary": "Returns an array of CapabilityInfo objects for the passed in capabilities.",
				"schema": {
					"type": "array",
					"items": {
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/capabilities#/definitions/CapabilityInfo"
					},
					"minItems": 1
				}
			},
			"examples": [
				{
					"name": "Default result",
					"params": [
						{
							"name": "capabilities",
							"value": [
								"xrn:firebolt:capability:device:model",
								"xrn:firebolt:capability:input:keyboard",
								"xrn:firebolt:capability:protocol:bluetoothle",
								"xrn:firebolt:capability:token:device",
								"xrn:firebolt:capability:token:platform",
								"xrn:firebolt:capability:protocol:moca",
								"xrn:firebolt:capability:wifi:scan",
								"xrn:firebolt:capability:localization:postal-code",
								"xrn:firebolt:capability:localization:locality"
							]
						}
					],
					"result": {
						"name": "Default Result",
						"value": [
							{
								"capability": "xrn:firebolt:capability:device:model",
								"supported": true,
								"available": true,
								"use": {
									"permitted": true,
									"granted": true
								},
								"manage": {
									"permitted": true,
									"granted": true
								},
								"provide": {
									"permitted": true,
									"granted": true
								}
							},
							{
								"capability": "xrn:firebolt:capability:input:keyboard",
								"supported": true,
								"available": true,
								"use": {
									"permitted": true,
									"granted": true
								},
								"manage": {
									"permitted": true,
									"granted": true
								},
								"provide": {
									"permitted": true,
									"granted": true
								}
							},
							{
								"capability": "xrn:firebolt:capability:protocol:bluetoothle",
								"supported": false,
								"available": false,
								"use": {
									"permitted": true,
									"granted": true
								},
								"manage": {
									"permitted": true,
									"granted": true
								},
								"provide": {
									"permitted": true,
									"granted": true
								},
								"details": [
									"unsupported"
								]
							},
							{
								"capability": "xrn:firebolt:capability:token:device",
								"supported": true,
								"available": true,
								"use": {
									"permitted": true,
									"granted": true
								},
								"manage": {
									"permitted": true,
									"granted": true
								},
								"provide": {
									"permitted": true,
									"granted": true
								}
							},
							{
								"capability": "xrn:firebolt:capability:token:platform",
								"supported": true,
								"available": false,
								"use": {
									"permitted": true,
									"granted": true
								},
								"manage": {
									"permitted": true,
									"granted": true
								},
								"provide": {
									"permitted": true,
									"granted": true
								},
								"details": [
									"unavailable"
								]
							},
							{
								"capability": "xrn:firebolt:capability:protocol:moca",
								"supported": true,
								"available": false,
								"use": {
									"permitted": true,
									"granted": true
								},
								"manage": {
									"permitted": true,
									"granted": true
								},
								"provide": {
									"permitted": true,
									"granted": true
								},
								"details": [
									"disabled",
									"unavailable"
								]
							},
							{
								"capability": "xrn:firebolt:capability:wifi:scan",
								"supported": true,
								"available": true,
								"use": {
									"permitted": true,
									"granted": true
								},
								"manage": {
									"permitted": true,
									"granted": true
								},
								"provide": {
									"permitted": true,
									"granted": true
								},
								"details": [
									"unpermitted"
								]
							},
							{
								"capability": "xrn:firebolt:capability:localization:postal-code",
								"supported": true,
								"available": true,
								"use": {
									"permitted": true,
									"granted": null
								},
								"manage": {
									"permitted": true,
									"granted": true
								},
								"provide": {
									"permitted": true,
									"granted": true
								},
								"details": [
									"ungranted"
								]
							},
							{
								"capability": "xrn:firebolt:capability:localization:postal-code",
								"supported": true,
								"available": true,
								"use": {
									"permitted": true,
									"granted": true
								},
								"manage": {
									"permitted": true,
									"granted": true
								},
								"provide": {
									"permitted": true,
									"granted": true
								},
								"details": [
									"ungranted"
								]
							},
							{
								"capability": "xrn:firebolt:capability:localization:locality",
								"supported": true,
								"available": true,
								"use": {
									"permitted": true,
									"granted": true
								},
								"manage": {
									"permitted": true,
									"granted": true
								},
								"provide": {
									"permitted": true,
									"granted": true
								},
								"details": [
									"grantDenied",
									"ungranted"
								]
							}
						]
					}
				}
			]
		},
		{
			"name": "Capabilities.request",
			"summary": "Requests grants for all capability/role combinations in the roles array.",
			"tags": [
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:capabilities:request"
					]
				}
			],
			"params": [
				{
					"name": "grants",
					"required": true,
					"schema": {
						"type": "array",
						"items": {
							"$ref": "https://meta.rdkcentral.com/firebolt/schemas/capabilities#/definitions/Permission"
						},
						"minItems": 1
					}
				}
			],
			"result": {
				"name": "request",
				"summary": "Returns an array of CapabilityInfo objects for the passed in capabilities.",
				"schema": {
					"type": "array",
					"items": {
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/capabilities#/definitions/CapabilityInfo"
					},
					"minItems": 1
				}
			},
			"examples": [
				{
					"name": "Default result",
					"params": [
						{
							"name": "grants",
							"value": [
								{
									"role": "use",
									"capability": "xrn:firebolt:capability:commerce:purchase"
								}
							]
						}
					],
					"result": {
						"name": "Default Result",
						"value": [
							{
								"capability": "xrn:firebolt:capability:commerce:purchase",
								"supported": true,
								"available": true,
								"use": {
									"permitted": true,
									"granted": true
								},
								"manage": {
									"permitted": true,
									"granted": true
								},
								"provide": {
									"permitted": true,
									"granted": true
								}
							}
						]
					}
				}
			]
		},
		{
			"name": "Capabilities.onAvailable",
			"tags": [
				{
					"name": "event",
					"x-notifier": "Capabilities.available"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:capabilities:info"
					]
				}
			],
			"summary": "Listens for all App permitted capabilities to become available.",
			"params": [
				{
					"name": "capability",
					"required": true,
					"schema": {
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/capabilities#/definitions/Capability"
					}
				},
				{
					"name": "listen",
					"schema": {
						"type": "boolean"
					}
				}
			],
			"examples": [
				{
					"name": "Platform token is available",
					"params": [
						{
							"name": "capability",
							"value": "xrn:firebolt:capability:token:platform"
						},
						{
							"name": "listen",
							"value": true
						}
					],
					"result": {
						"name": "result",
						"value": null
					}
				}
			],
			"result": {
				"name": "result",
				"schema": {
					"type": "null"
				}
			}
		},
		{
			"name": "Capabilities.onUnavailable",
			"tags": [
				{
					"name": "event",
					"x-notifier": "Capabilities.unavailable"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:capabilities:info"
					]
				}
			],
			"summary": "Listens for all App permitted capabilities to become unavailable.",
			"params": [
				{
					"name": "capability",
					"required": true,
					"schema": {
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/capabilities#/definitions/Capability"
					}
				},
				{
					"name": "listen",
					"schema": {
						"type": "boolean"
					}
				}
			],
			"examples": [
				{
					"name": "Platform token is unavailable.",
					"params": [
						{
							"name": "capability",
							"value": "xrn:firebolt:capability:token:platform"
						},
						{
							"name": "listen",
							"value": true
						}
					],
					"result": {
						"name": "result",
						"value": null
					}
				}
			],
			"result": {
				"name": "result",
				"schema": {
					"type": "null"
				}
			}
		},
		{
			"name": "Capabilities.onGranted",
			"tags": [
				{
					"name": "event",
					"x-notifier": "Capabilities.granted"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:capabilities:info"
					]
				}
			],
			"summary": "Listens for all App permitted capabilities to become granted.",
			"params": [
				{
					"name": "role",
					"required": true,
					"schema": {
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/capabilities#/definitions/Role"
					}
				},
				{
					"name": "capability",
					"required": true,
					"schema": {
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/capabilities#/definitions/Capability"
					}
				},
				{
					"name": "listen",
					"schema": {
						"type": "boolean"
					}
				}
			],
			"examples": [
				{
					"name": "Postal code granted",
					"params": [
						{
							"name": "role",
							"value": "use"
						},
						{
							"name": "capability",
							"value": "xrn:firebolt:capability:localization:postal-code"
						},
						{
							"name": "listen",
							"value": true
						}
					],
					"result": {
						"name": "result",
						"value": null
					}
				}
			],
			"result": {
				"name": "result",
				"schema": {
					"type": "null"
				}
			}
		},
		{
			"name": "Capabilities.onRevoked",
			"tags": [
				{
					"name": "event",
					"x-notifier": "Capabilities.revoked"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:capabilities:info"
					]
				}
			],
			"summary": "Listens for all App permitted capabilities to become revoked.",
			"params": [
				{
					"name": "role",
					"required": true,
					"schema": {
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/capabilities#/definitions/Role"
					}
				},
				{
					"name": "capability",
					"required": true,
					"schema": {
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/capabilities#/definitions/Capability"
					}
				},
				{
					"name": "listen",
					"schema": {
						"type": "boolean"
					}
				}
			],
			"examples": [
				{
					"name": "Postal code revoked",
					"params": [
						{
							"name": "role",
							"value": "use"
						},
						{
							"name": "capability",
							"value": "xrn:firebolt:capability:localization:postal-code"
						},
						{
							"name": "listen",
							"value": true
						}
					],
					"result": {
						"name": "result",
						"value": null
					}
				}
			],
			"result": {
				"name": "result",
				"schema": {
					"type": "null"
				}
			}
		},
		{
			"name": "Device.id",
			"summary": "Get the platform back-office device identifier",
			"params": [],
			"tags": [
				{
					"name": "property:immutable"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:device:id"
					]
				}
			],
			"result": {
				"name": "id",
				"summary": "the id",
				"schema": {
					"type": "string"
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [],
					"result": {
						"name": "Default Result",
						"value": "123"
					}
				}
			]
		},
		{
			"name": "Device.distributor",
			"summary": "Get the name of the entity which is distributing the current device. There can be multiple distributors which distribute the same device model.",
			"params": [],
			"tags": [
				{
					"name": "property:immutable"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:device:distributor"
					]
				}
			],
			"result": {
				"name": "distributorId",
				"summary": "the distributor ID",
				"schema": {
					"type": "string"
				}
			},
			"examples": [
				{
					"name": "Getting the distributor ID",
					"params": [],
					"result": {
						"name": "Default Result",
						"value": "Company"
					}
				}
			]
		},
		{
			"name": "Device.platform",
			"summary": "Get a platform identifier for the device. This API should be used to correlate metrics on the device only and cannot be guaranteed to have consistent responses across platforms.",
			"params": [],
			"tags": [
				{
					"name": "property:immutable"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:device:info"
					]
				}
			],
			"result": {
				"name": "platformId",
				"summary": "the platform ID",
				"schema": {
					"type": "string"
				}
			},
			"examples": [
				{
					"name": "Getting the platform ID",
					"params": [],
					"result": {
						"name": "Default Result",
						"value": "WPE"
					}
				}
			]
		},
		{
			"name": "Device.uid",
			"summary": "Gets a unique id for the current app & device",
			"params": [],
			"tags": [
				{
					"name": "property:immutable"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:device:uid"
					]
				}
			],
			"result": {
				"name": "uniqueId",
				"summary": "a unique ID",
				"schema": {
					"type": "string"
				}
			},
			"examples": [
				{
					"name": "Getting the unique ID",
					"params": [],
					"result": {
						"name": "Default Result",
						"value": "ee6723b8-7ab3-462c-8d93-dbf61227998e"
					}
				}
			]
		},
		{
			"name": "Device.type",
			"summary": "Get the device type",
			"params": [],
			"tags": [
				{
					"name": "property:immutable"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:device:info"
					]
				}
			],
			"result": {
				"name": "deviceType",
				"summary": "the device type",
				"schema": {
					"type": "string"
				}
			},
			"examples": [
				{
					"name": "Getting the device type",
					"params": [],
					"result": {
						"name": "Default Result",
						"value": "STB"
					}
				}
			]
		},
		{
			"name": "Device.model",
			"summary": "Get the manufacturer designated model of the device",
			"params": [],
			"tags": [
				{
					"name": "property:immutable"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:device:model"
					]
				}
			],
			"result": {
				"name": "model",
				"summary": "the device model",
				"schema": {
					"type": "string"
				}
			},
			"examples": [
				{
					"name": "Getting the device model",
					"params": [],
					"result": {
						"name": "Default Result",
						"value": "xi6"
					}
				}
			]
		},
		{
			"name": "Device.sku",
			"summary": "Get the device sku",
			"params": [],
			"tags": [
				{
					"name": "property:immutable"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:device:sku"
					]
				}
			],
			"result": {
				"name": "sku",
				"summary": "the device sku",
				"schema": {
					"type": "string"
				}
			},
			"examples": [
				{
					"name": "Getting the device sku",
					"params": [],
					"result": {
						"name": "Default Result",
						"value": "AX061AEI"
					}
				}
			]
		},
		{
			"name": "Device.make",
			"summary": "Get the manufacturer of the device model",
			"params": [],
			"tags": [
				{
					"name": "property:immutable"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:device:make"
					]
				}
			],
			"result": {
				"name": "make",
				"summary": "the device make",
				"schema": {
					"type": "string"
				}
			},
			"examples": [
				{
					"name": "Getting the device make",
					"params": [],
					"result": {
						"name": "Default Result",
						"value": "Arris"
					}
				}
			]
		},
		{
			"name": "Device.version",
			"summary": "Get the SDK, OS and other version info",
			"params": [],
			"tags": [
				{
					"name": "exclude-from-sdk"
				},
				{
					"name": "property:immutable"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:device:info"
					]
				}
			],
			"result": {
				"name": "versions",
				"summary": "the versions",
				"schema": {
					"$ref": "#/components/schemas/Device.DeviceVersion"
				}
			},
			"examples": [
				{
					"name": "Getting the os and sdk versions",
					"params": [],
					"result": {
						"name": "Default Result",
						"value": {
							"sdk": {
								"major": 0,
								"minor": 8,
								"patch": 0,
								"readable": "Firebolt JS SDK v0.8.0"
							},
							"api": {
								"major": 0,
								"minor": 8,
								"patch": 0,
								"readable": "Firebolt API v0.8.0"
							},
							"firmware": {
								"major": 1,
								"minor": 2,
								"patch": 3,
								"readable": "Device Firmware v1.2.3"
							},
							"os": {
								"major": 0,
								"minor": 1,
								"patch": 0,
								"readable": "Firebolt OS v0.1.0"
							},
							"debug": "Non-parsable build info for error logging only."
						}
					}
				}
			]
		},
		{
			"name": "Device.hdcp",
			"summary": "Get the negotiated HDCP profiles for a connected device. \n\n For devices that do not require additional connections (e.g. panels), `true` will be returned for all profiles.",
			"params": [],
			"tags": [
				{
					"name": "property:readonly"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:device:info"
					]
				}
			],
			"result": {
				"name": "negotiatedHdcpVersions",
				"summary": "the negotiated HDCP versions",
				"schema": {
					"$ref": "#/components/schemas/Device.HDCPVersionMap"
				}
			},
			"examples": [
				{
					"name": "Getting the negotiated HDCP versions",
					"params": [],
					"result": {
						"name": "Default Result",
						"value": {
							"hdcp1.4": true,
							"hdcp2.2": true
						}
					}
				}
			]
		},
		{
			"name": "Device.hdr",
			"summary": "Get the negotiated HDR formats for the connected display and device",
			"params": [],
			"tags": [
				{
					"name": "property:readonly"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:device:info"
					]
				}
			],
			"result": {
				"name": "negotiatedHdrFormats",
				"summary": "the negotiated HDR formats",
				"schema": {
					"$ref": "#/components/schemas/Device.HDRFormatMap"
				}
			},
			"examples": [
				{
					"name": "Getting the negotiated HDR formats",
					"params": [],
					"result": {
						"name": "Default Result",
						"value": {
							"hdr10": true,
							"hdr10Plus": true,
							"dolbyVision": true,
							"hlg": true
						}
					}
				}
			]
		},
		{
			"name": "Device.audio",
			"summary": "Get the supported audio profiles for the connected devices. \n\n It is not recommended to use this API for visual badging on content within your app since this does not reflect the settings of the user.",
			"params": [],
			"tags": [
				{
					"name": "property:readonly"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:device:info"
					]
				}
			],
			"result": {
				"name": "supportedAudioProfiles",
				"summary": "the supported audio profiles",
				"schema": {
					"$ref": "#/components/schemas/Device.AudioProfiles"
				}
			},
			"examples": [
				{
					"name": "Getting the supported audio profiles",
					"params": [],
					"result": {
						"name": "Default Result",
						"value": {
							"stereo": true,
							"dolbyDigital5.1": true,
							"dolbyDigital5.1+": true,
							"dolbyAtmos": true
						}
					}
				}
			]
		},
		{
			"name": "Device.screenResolution",
			"summary": "Get the resolution for the graphical surface of the app. \n\nThe pairs returned will be of a [width, height] format and will correspond to the following values: \n\nNTSC Standard Definition (SD): [720, 480] \n\nPAL Standard Definition (SD): [720, 576] \n\nHigh Definition (HD): [1280, 720] \n\nFull HD (FHD): [1920, 1080]\n\n4K Ultra High Definition (UHD): [3840, 2160] \n\n**Deprecated:** Use non-Firebolt APIs specific to your platform, e.g. W3C APIs",
			"params": [],
			"tags": [
				{
					"name": "property:readonly"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:device:info"
					]
				},
				{
					"name": "deprecated",
					"x-alternative": "Use non-Firebolt APIs specific to your platform, e.g. W3C APIs",
					"x-since": "1.4.0"
				}
			],
			"result": {
				"name": "screenResolution",
				"summary": "the resolution",
				"schema": {
					"$ref": "#/components/schemas/Device.Resolution"
				}
			},
			"examples": [
				{
					"name": "Getting the screen resolution",
					"params": [],
					"result": {
						"name": "Default Result",
						"value": [
							1920,
							1080
						]
					}
				}
			]
		},
		{
			"name": "Device.videoResolution",
			"summary": "Get the maximum supported video resolution of the currently connected device and display. \n\nThe pairs returned will be of a [width, height] format and will correspond to the following values: \n\nNTSC Standard Definition (SD): [720, 480] \n\nPAL Standard Definition (SD): [720, 576] \n\nHigh Definition (HD): [1280, 720] \n\nFull HD (FHD): [1920, 1080]\n\n4K Ultra High Definition (UHD): [3840, 2160]",
			"params": [],
			"tags": [
				{
					"name": "property:readonly"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:device:info"
					]
				}
			],
			"result": {
				"name": "videoResolution",
				"summary": "the resolution",
				"schema": {
					"$ref": "#/components/schemas/Device.Resolution"
				}
			},
			"examples": [
				{
					"name": "Getting the video resolution",
					"params": [],
					"result": {
						"name": "Default Result",
						"value": [
							1920,
							1080
						]
					}
				}
			]
		},
		{
			"name": "Device.name",
			"summary": "The human readable name of the device",
			"params": [],
			"tags": [
				{
					"name": "property"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:device:name"
					]
				}
			],
			"result": {
				"name": "value",
				"summary": "the device friendly-name",
				"schema": {
					"type": "string"
				}
			},
			"examples": [
				{
					"name": "Default example #1",
					"params": [],
					"result": {
						"name": "Default Result",
						"value": "Living Room"
					}
				},
				{
					"name": "Default example #2",
					"params": [],
					"result": {
						"name": "Default Result",
						"value": "Kitchen"
					}
				}
			]
		},
		{
			"name": "Device.network",
			"summary": "Get the current network status and type",
			"params": [],
			"tags": [
				{
					"name": "property:readonly"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:network:status"
					]
				}
			],
			"result": {
				"name": "networkInfo",
				"summary": "the status and type",
				"schema": {
					"$ref": "#/components/schemas/Device.NetworkInfoResult"
				}
			},
			"examples": [
				{
					"name": "Getting the network info",
					"params": [],
					"result": {
						"name": "Default Result",
						"value": {
							"state": "connected",
							"type": "wifi"
						}
					}
				}
			]
		},
		{
			"name": "Device.onDeviceNameChanged",
			"tags": [
				{
					"name": "event",
					"x-notifier": "Device.deviceNameChanged"
				},
				{
					"name": "deprecated",
					"x-since": "0.6.0",
					"x-alternative": "Device.name()"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:device:name"
					]
				}
			],
			"summary": "Get the human readable name of the device",
			"params": [
				{
					"name": "listen",
					"schema": {
						"type": "boolean"
					}
				}
			],
			"examples": [
				{
					"name": "Getting the device name",
					"params": [
						{
							"name": "listen",
							"value": true
						}
					],
					"result": {
						"name": "result",
						"value": null
					}
				}
			],
			"result": {
				"name": "result",
				"schema": {
					"type": "null"
				}
			}
		},
		{
			"name": "Device.onNameChanged",
			"summary": "The human readable name of the device",
			"params": [
				{
					"name": "listen",
					"schema": {
						"type": "boolean"
					}
				}
			],
			"tags": [
				{
					"name": "event",
					"x-notifier": "Device.nameChanged",
					"x-subscriber-for": "Device.name"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:device:name"
					]
				}
			],
			"examples": [
				{
					"name": "Default example #1",
					"params": [
						{
							"name": "listen",
							"value": true
						}
					],
					"result": {
						"name": "result",
						"value": null
					}
				},
				{
					"name": "Default example #2",
					"params": [
						{
							"name": "listen",
							"value": true
						}
					],
					"result": {
						"name": "result",
						"value": null
					}
				}
			],
			"result": {
				"name": "result",
				"schema": {
					"type": "null"
				}
			}
		},
		{
			"name": "Device.onHdcpChanged",
			"summary": "Get the negotiated HDCP profiles for a connected device. \n\n For devices that do not require additional connections (e.g. panels), `true` will be returned for all profiles.",
			"params": [
				{
					"name": "listen",
					"schema": {
						"type": "boolean"
					}
				}
			],
			"tags": [
				{
					"name": "event",
					"x-notifier": "Device.hdcpChanged",
					"x-subscriber-for": "Device.hdcp"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:device:info"
					]
				}
			],
			"examples": [
				{
					"name": "Getting the negotiated HDCP versions",
					"params": [
						{
							"name": "listen",
							"value": true
						}
					],
					"result": {
						"name": "result",
						"value": null
					}
				}
			],
			"result": {
				"name": "result",
				"schema": {
					"type": "null"
				}
			}
		},
		{
			"name": "Device.onHdrChanged",
			"summary": "Get the negotiated HDR formats for the connected display and device",
			"params": [
				{
					"name": "listen",
					"schema": {
						"type": "boolean"
					}
				}
			],
			"tags": [
				{
					"name": "event",
					"x-notifier": "Device.hdrChanged",
					"x-subscriber-for": "Device.hdr"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:device:info"
					]
				}
			],
			"examples": [
				{
					"name": "Getting the negotiated HDR formats",
					"params": [
						{
							"name": "listen",
							"value": true
						}
					],
					"result": {
						"name": "result",
						"value": null
					}
				}
			],
			"result": {
				"name": "result",
				"schema": {
					"type": "null"
				}
			}
		},
		{
			"name": "Device.onAudioChanged",
			"summary": "Get the supported audio profiles for the connected devices. \n\n It is not recommended to use this API for visual badging on content within your app since this does not reflect the settings of the user.",
			"params": [
				{
					"name": "listen",
					"schema": {
						"type": "boolean"
					}
				}
			],
			"tags": [
				{
					"name": "event",
					"x-notifier": "Device.audioChanged",
					"x-subscriber-for": "Device.audio"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:device:info"
					]
				}
			],
			"examples": [
				{
					"name": "Getting the supported audio profiles",
					"params": [
						{
							"name": "listen",
							"value": true
						}
					],
					"result": {
						"name": "result",
						"value": null
					}
				}
			],
			"result": {
				"name": "result",
				"schema": {
					"type": "null"
				}
			}
		},
		{
			"name": "Device.onScreenResolutionChanged",
			"summary": "Get the resolution for the graphical surface of the app. \n\nThe pairs returned will be of a [width, height] format and will correspond to the following values: \n\nNTSC Standard Definition (SD): [720, 480] \n\nPAL Standard Definition (SD): [720, 576] \n\nHigh Definition (HD): [1280, 720] \n\nFull HD (FHD): [1920, 1080]\n\n4K Ultra High Definition (UHD): [3840, 2160] \n\n**Deprecated:** Use non-Firebolt APIs specific to your platform, e.g. W3C APIs",
			"params": [
				{
					"name": "listen",
					"schema": {
						"type": "boolean"
					}
				}
			],
			"tags": [
				{
					"name": "event",
					"x-notifier": "Device.screenResolutionChanged",
					"x-subscriber-for": "Device.screenResolution"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:device:info"
					]
				},
				{
					"name": "deprecated",
					"x-alternative": "Use non-Firebolt APIs specific to your platform, e.g. W3C APIs",
					"x-since": "1.4.0"
				}
			],
			"examples": [
				{
					"name": "Getting the screen resolution",
					"params": [
						{
							"name": "listen",
							"value": true
						}
					],
					"result": {
						"name": "result",
						"value": null
					}
				}
			],
			"result": {
				"name": "result",
				"schema": {
					"type": "null"
				}
			}
		},
		{
			"name": "Device.onVideoResolutionChanged",
			"summary": "Get the maximum supported video resolution of the currently connected device and display. \n\nThe pairs returned will be of a [width, height] format and will correspond to the following values: \n\nNTSC Standard Definition (SD): [720, 480] \n\nPAL Standard Definition (SD): [720, 576] \n\nHigh Definition (HD): [1280, 720] \n\nFull HD (FHD): [1920, 1080]\n\n4K Ultra High Definition (UHD): [3840, 2160]",
			"params": [
				{
					"name": "listen",
					"schema": {
						"type": "boolean"
					}
				}
			],
			"tags": [
				{
					"name": "event",
					"x-notifier": "Device.videoResolutionChanged",
					"x-subscriber-for": "Device.videoResolution"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:device:info"
					]
				}
			],
			"examples": [
				{
					"name": "Getting the video resolution",
					"params": [
						{
							"name": "listen",
							"value": true
						}
					],
					"result": {
						"name": "result",
						"value": null
					}
				}
			],
			"result": {
				"name": "result",
				"schema": {
					"type": "null"
				}
			}
		},
		{
			"name": "Device.onNetworkChanged",
			"summary": "Get the current network status and type",
			"params": [
				{
					"name": "listen",
					"schema": {
						"type": "boolean"
					}
				}
			],
			"tags": [
				{
					"name": "event",
					"x-notifier": "Device.networkChanged",
					"x-subscriber-for": "Device.network"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:network:status"
					]
				}
			],
			"examples": [
				{
					"name": "Getting the network info",
					"params": [
						{
							"name": "listen",
							"value": true
						}
					],
					"result": {
						"name": "result",
						"value": null
					}
				}
			],
			"result": {
				"name": "result",
				"schema": {
					"type": "null"
				}
			}
		},
		{
			"name": "Discovery.policy",
			"summary": "get the discovery policy",
			"params": [],
			"tags": [
				{
					"name": "property:readonly"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:discovery:policy"
					]
				}
			],
			"result": {
				"name": "policy",
				"summary": "discovery policy opt-in/outs",
				"schema": {
					"$ref": "#/components/schemas/Discovery.DiscoveryPolicy"
				}
			},
			"examples": [
				{
					"name": "Getting the discovery policy",
					"params": [],
					"result": {
						"name": "Default Result",
						"value": {
							"enableRecommendations": true,
							"shareWatchHistory": true,
							"rememberWatchedPrograms": true
						}
					}
				}
			]
		},
		{
			"name": "Discovery.entityInfo",
			"tags": [
				{
					"name": "polymorphic-pull"
				},
				{
					"name": "capabilities",
					"x-provides": "xrn:firebolt:capability:discovery:entity-info"
				},
				{
					"name": "deprecated"
				}
			],
			"summary": "Provide information about a program entity and its available watchable assets, such as entitlement status and price, via either a push or pull call flow.",
			"description": "Provide information about a program entity and its available watchable assets, such as entitlement status and price, via either a push or pull call flow. Includes information about the program entity and its relevant associated entities, such as extras, previews, and, in the case of TV series, seasons and episodes.\n\nSee the `EntityInfo` and `WayToWatch` data structures below for more information.\n\nThe app only needs to implement Pull support for `entityInfo` at this time.",
			"params": [
				{
					"name": "correlationId",
					"required": true,
					"schema": {
						"type": [
							"string",
							"null"
						]
					}
				},
				{
					"name": "result",
					"required": true,
					"schema": {
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/discovery#/definitions/EntityInfoResult"
					},
					"summary": "The entityInfo data."
				}
			],
			"result": {
				"name": "success",
				"summary": "True if the push operation is successful",
				"schema": {
					"type": "boolean"
				}
			},
			"examples": [
				{
					"name": "Send entity info for a movie to the platform.",
					"params": [
						{
							"name": "correlationId",
							"value": null
						},
						{
							"name": "result",
							"value": {
								"expires": "2025-01-01T00:00:00.000Z",
								"entity": {
									"identifiers": {
										"entityId": "345"
									},
									"entityType": "program",
									"programType": "movie",
									"title": "Cool Runnings",
									"synopsis": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Pulvinar sapien et ligula ullamcorper malesuada proin libero nunc.",
									"releaseDate": "1993-01-01T00:00:00.000Z",
									"contentRatings": [
										{
											"scheme": "US-Movie",
											"rating": "PG"
										},
										{
											"scheme": "CA-Movie",
											"rating": "G"
										}
									],
									"waysToWatch": [
										{
											"identifiers": {
												"assetId": "123"
											},
											"expires": "2025-01-01T00:00:00.000Z",
											"entitled": true,
											"entitledExpires": "2025-01-01T00:00:00.000Z",
											"offeringType": "buy",
											"price": 2.99,
											"videoQuality": [
												"UHD"
											],
											"audioProfile": [
												"dolbyAtmos"
											],
											"audioLanguages": [
												"en"
											],
											"closedCaptions": [
												"en"
											],
											"subtitles": [
												"es"
											],
											"audioDescriptions": [
												"en"
											]
										}
									]
								}
							}
						}
					],
					"result": {
						"name": "success",
						"value": true
					}
				},
				{
					"name": "Send entity info for a movie with a trailer to the platform.",
					"params": [
						{
							"name": "correlationId",
							"value": null
						},
						{
							"name": "result",
							"value": {
								"expires": "2025-01-01T00:00:00.000Z",
								"entity": {
									"identifiers": {
										"entityId": "345"
									},
									"entityType": "program",
									"programType": "movie",
									"title": "Cool Runnings",
									"synopsis": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Pulvinar sapien et ligula ullamcorper malesuada proin libero nunc.",
									"releaseDate": "1993-01-01T00:00:00.000Z",
									"contentRatings": [
										{
											"scheme": "US-Movie",
											"rating": "PG"
										},
										{
											"scheme": "CA-Movie",
											"rating": "G"
										}
									],
									"waysToWatch": [
										{
											"identifiers": {
												"assetId": "123"
											},
											"expires": "2025-01-01T00:00:00.000Z",
											"entitled": true,
											"entitledExpires": "2025-01-01T00:00:00.000Z",
											"offeringType": "buy",
											"price": 2.99,
											"videoQuality": [
												"UHD"
											],
											"audioProfile": [
												"dolbyAtmos"
											],
											"audioLanguages": [
												"en"
											],
											"closedCaptions": [
												"en"
											],
											"subtitles": [
												"es"
											],
											"audioDescriptions": [
												"en"
											]
										}
									]
								},
								"related": [
									{
										"identifiers": {
											"entityId": "345"
										},
										"entityType": "program",
										"programType": "preview",
										"title": "Cool Runnings Trailer",
										"waysToWatch": [
											{
												"identifiers": {
													"assetId": "123111",
													"entityId": "345"
												},
												"entitled": true,
												"videoQuality": [
													"HD"
												],
												"audioProfile": [
													"dolbyAtmos"
												],
												"audioLanguages": [
													"en"
												],
												"closedCaptions": [
													"en"
												]
											}
										]
									}
								]
							}
						}
					],
					"result": {
						"name": "success",
						"value": true
					}
				},
				{
					"name": "Send entity info for a TV Series with seasons and episodes to the platform.",
					"params": [
						{
							"name": "correlationId",
							"value": null
						},
						{
							"name": "result",
							"value": {
								"expires": "2025-01-01T00:00:00.000Z",
								"entity": {
									"identifiers": {
										"entityId": "98765"
									},
									"entityType": "program",
									"programType": "series",
									"title": "Perfect Strangers",
									"synopsis": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Pulvinar sapien et ligula ullamcorper malesuada proin libero nunc.",
									"releaseDate": "1986-01-01T00:00:00.000Z",
									"contentRatings": [
										{
											"scheme": "US-TV",
											"rating": "TV-PG"
										}
									]
								},
								"related": [
									{
										"identifiers": {
											"entityId": "111",
											"seriesId": "98765"
										},
										"entityType": "program",
										"programType": "season",
										"seasonNumber": 1,
										"title": "Perfect Strangers Season 3",
										"contentRatings": [
											{
												"scheme": "US-TV",
												"rating": "TV-PG"
											}
										],
										"waysToWatch": [
											{
												"identifiers": {
													"assetId": "556",
													"entityId": "111",
													"seriesId": "98765"
												},
												"entitled": true,
												"offeringType": "free",
												"videoQuality": [
													"SD"
												],
												"audioProfile": [
													"stereo"
												],
												"audioLanguages": [
													"en"
												],
												"closedCaptions": [
													"en"
												]
											}
										]
									},
									{
										"identifiers": {
											"entityId": "111",
											"seriesId": "98765"
										},
										"entityType": "program",
										"programType": "episode",
										"seasonNumber": 1,
										"episodeNumber": 1,
										"title": "Knock Knock, Who's There?",
										"synopsis": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Pulvinar sapien et ligula ullamcorper malesuada proin libero nunc.",
										"releaseDate": "1986-03-25T00:00:00.000Z",
										"contentRatings": [
											{
												"scheme": "US-TV",
												"rating": "TV-PG"
											}
										],
										"waysToWatch": [
											{
												"identifiers": {
													"assetId": "556",
													"entityId": "111",
													"seriesId": "98765"
												},
												"entitled": true,
												"offeringType": "free",
												"videoQuality": [
													"SD"
												],
												"audioProfile": [
													"stereo"
												],
												"audioLanguages": [
													"en"
												],
												"closedCaptions": [
													"en"
												]
											}
										]
									},
									{
										"identifiers": {
											"entityId": "112",
											"seriesId": "98765"
										},
										"entityType": "program",
										"programType": "episode",
										"seasonNumber": 1,
										"episodeNumber": 2,
										"title": "Picture This",
										"synopsis": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Pulvinar sapien et ligula ullamcorper malesuada proin libero nunc.",
										"releaseDate": "1986-04-01T00:00:00.000Z",
										"contentRatings": [
											{
												"scheme": "US-TV",
												"rating": "TV-PG"
											}
										],
										"waysToWatch": [
											{
												"identifiers": {
													"assetId": "557",
													"entityId": "112",
													"seriesId": "98765"
												},
												"entitled": true,
												"offeringType": "free",
												"videoQuality": [
													"SD"
												],
												"audioProfile": [
													"stereo"
												],
												"audioLanguages": [
													"en"
												],
												"closedCaptions": [
													"en"
												]
											}
										]
									}
								]
							}
						}
					],
					"result": {
						"name": "result",
						"value": true
					}
				}
			]
		},
		{
			"name": "Discovery.purchasedContent",
			"tags": [
				{
					"name": "polymorphic-pull"
				},
				{
					"name": "capabilities",
					"x-provides": "xrn:firebolt:capability:discovery:purchased-content"
				},
				{
					"name": "deprecated"
				}
			],
			"summary": "Provide a list of purchased content for the authenticated account, such as rentals and electronic sell through purchases.",
			"params": [
				{
					"name": "correlationId",
					"required": true,
					"schema": {
						"type": [
							"string",
							"null"
						]
					}
				},
				{
					"name": "result",
					"required": true,
					"schema": {
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/discovery#/definitions/PurchasedContentResult"
					},
					"summary": "The data for the purchasedContent"
				}
			],
			"result": {
				"name": "success",
				"summary": "True if the push operation is successful",
				"schema": {
					"type": "boolean"
				}
			},
			"examples": [
				{
					"name": "Inform the platform of the user's purchased content",
					"params": [
						{
							"name": "correlationId",
							"value": null
						},
						{
							"name": "result",
							"value": {
								"totalCount": 10,
								"expires": "2025-01-01T00:00:00.000Z",
								"entries": [
									{
										"identifiers": {
											"entityId": "345"
										},
										"entityType": "program",
										"programType": "movie",
										"title": "Cool Runnings",
										"synopsis": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Pulvinar sapien et ligula ullamcorper malesuada proin libero nunc.",
										"releaseDate": "1993-01-01T00:00:00.000Z",
										"contentRatings": [
											{
												"scheme": "US-Movie",
												"rating": "PG"
											},
											{
												"scheme": "CA-Movie",
												"rating": "G"
											}
										],
										"waysToWatch": [
											{
												"identifiers": {
													"assetId": "123"
												},
												"expires": "2025-01-01T00:00:00.000Z",
												"entitled": true,
												"entitledExpires": "2025-01-01T00:00:00.000Z",
												"offeringType": "buy",
												"price": 2.99,
												"videoQuality": [
													"UHD"
												],
												"audioProfile": [
													"dolbyAtmos"
												],
												"audioLanguages": [
													"en"
												],
												"closedCaptions": [
													"en"
												],
												"subtitles": [
													"es"
												],
												"audioDescriptions": [
													"en"
												]
											}
										]
									}
								]
							}
						}
					],
					"result": {
						"name": "success",
						"value": true
					}
				}
			],
			"description": "Return content purchased by the user, such as rentals and electronic sell through purchases.\n\nThe app should return the user's 100 most recent purchases in `entries`. The total count of purchases must be provided in `count`. If `count` is greater than the total number of `entries`, the UI may provide a link into the app to see the complete purchase list.\n\nThe `EntityInfo` object returned is not required to have `waysToWatch` populated, but it is recommended that it do so in case the UI wants to surface additional information on the purchases screen.\n\nThe app should implement both Push and Pull methods for `purchasedContent`.\n\nThe app should actively push `purchasedContent` when:\n\n*  The app becomes Active.\n*  When the state of the purchasedContent set has changed.\n*  The app goes into Inactive or Background state, if there is a chance a change event has been missed."
		},
		{
			"name": "Discovery.watched",
			"summary": "Notify the platform that content was partially or completely watched",
			"tags": [
				{
					"name": "polymorphic-reducer"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:discovery:watched"
					]
				}
			],
			"params": [
				{
					"name": "entityId",
					"required": true,
					"schema": {
						"type": "string"
					},
					"summary": "The entity Id of the watched content."
				},
				{
					"name": "progress",
					"summary": "How much of the content has been watched (percentage as (0-0.999) for VOD, number of seconds for live)",
					"schema": {
						"type": "number",
						"minimum": 0
					}
				},
				{
					"name": "completed",
					"summary": "Whether or not this viewing is considered \"complete,\" per the app's definition thereof",
					"schema": {
						"type": "boolean"
					}
				},
				{
					"name": "watchedOn",
					"summary": "Date/Time the content was watched, ISO 8601 Date/Time",
					"schema": {
						"type": "string",
						"format": "date-time"
					}
				}
			],
			"result": {
				"name": "success",
				"summary": "whether the call was successful or not",
				"schema": {
					"type": "boolean"
				}
			},
			"examples": [
				{
					"name": "Notifying the platform of watched content",
					"params": [
						{
							"name": "entityId",
							"value": "partner.com/entity/123"
						},
						{
							"name": "progress",
							"value": 0.95
						},
						{
							"name": "completed",
							"value": true
						},
						{
							"name": "watchedOn",
							"value": "2021-04-23T18:25:43.511Z"
						}
					],
					"result": {
						"name": "success",
						"value": true
					}
				}
			]
		},
		{
			"name": "Discovery.watchNext",
			"summary": "Suggest a call-to-action for this app on the platform home screen",
			"tags": [
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:discovery:watch-next"
					]
				}
			],
			"params": [
				{
					"name": "title",
					"summary": "The title of this call to action",
					"schema": {
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/types#/definitions/LocalizedString"
					},
					"required": true
				},
				{
					"name": "identifiers",
					"summary": "A set of content identifiers for this call to action",
					"schema": {
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/entertainment#/definitions/ContentIdentifiers"
					},
					"required": true
				},
				{
					"name": "expires",
					"summary": "When this call to action should no longer be presented to users",
					"schema": {
						"type": "string",
						"format": "date-time"
					}
				},
				{
					"name": "images",
					"summary": "A set of images for this call to action",
					"schema": {
						"type": "object",
						"patternProperties": {
							"^.*$": {
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/types#/definitions/LocalizedString"
							}
						}
					}
				}
			],
			"result": {
				"name": "success",
				"summary": "whether the call was successful or not",
				"schema": {
					"type": "boolean"
				}
			},
			"examples": [
				{
					"name": "Suggest a watch-next tile for the home screen",
					"params": [
						{
							"name": "title",
							"value": "A Cool Show"
						},
						{
							"name": "identifiers",
							"value": {
								"entityId": "partner.com/entity/123"
							}
						},
						{
							"name": "expires",
							"value": "2021-04-23T18:25:43.511Z"
						},
						{
							"name": "images",
							"value": {
								"3x4": {
									"en-US": "https://i.ytimg.com/vi/4r7wHMg5Yjg/maxresdefault.jpg",
									"es": "https://i.ytimg.com/vi/4r7wHMg5Yjg/maxresdefault.jpg"
								},
								"16x9": {
									"en": "https://i.ytimg.com/vi/4r7wHMg5Yjg/maxresdefault.jpg"
								}
							}
						}
					],
					"result": {
						"name": "success",
						"value": true
					}
				},
				{
					"name": "Suggest a watch-next tile for the home screen",
					"params": [
						{
							"name": "title",
							"value": "A Fantastic Show"
						},
						{
							"name": "identifiers",
							"value": {
								"entityId": "partner.com/entity/456"
							}
						}
					],
					"result": {
						"name": "success",
						"value": true
					}
				}
			]
		},
		{
			"name": "Discovery.entitlements",
			"tags": [
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:discovery:content-access"
					]
				},
				{
					"name": "deprecated",
					"x-since": "0.10.0",
					"x-alternative": "Discovery.contentAccess()"
				}
			],
			"summary": "Inform the platform of the users latest entitlements w/in this app.",
			"params": [
				{
					"name": "entitlements",
					"summary": "Array of entitlement objects",
					"schema": {
						"type": "array",
						"items": {
							"$ref": "https://meta.rdkcentral.com/firebolt/schemas/entertainment#/definitions/Entitlement"
						}
					},
					"required": true
				}
			],
			"result": {
				"name": "success",
				"summary": "whether the call was successful or not",
				"schema": {
					"type": "boolean"
				}
			},
			"examples": [
				{
					"name": "Update user's entitlements",
					"params": [
						{
							"name": "entitlements",
							"value": [
								{
									"entitlementId": "partner.com/entitlement/123",
									"startTime": "2021-04-23T18:25:43.511Z",
									"endTime": "2021-04-23T18:25:43.511Z"
								},
								{
									"entitlementId": "partner.com/entitlement/456",
									"startTime": "2021-04-23T18:25:43.511Z",
									"endTime": "2021-04-23T18:25:43.511Z"
								}
							]
						}
					],
					"result": {
						"name": "success",
						"value": true
					}
				}
			]
		},
		{
			"name": "Discovery.contentAccess",
			"summary": "Inform the platform of what content the user can access either by discovering it or consuming it. Availabilities determine which content is discoverable to a user, while entitlements determine if the user can currently consume that content. Content can be available but not entitled, this means that user can see the content but when they try to open it they must gain an entitlement either through purchase or subscription upgrade. In case the access changed off-device, this API should be called any time the app comes to the foreground to refresh the access. This API should also be called any time the availabilities or entitlements change within the app for any reason. Typical reasons may include the user signing into an account or upgrading a subscription. Less common cases can cause availabilities to change, such as moving to a new service location. When availabilities or entitlements are removed from the subscriber (such as when the user signs out), then an empty array should be given. To clear both, use the Discovery.clearContentAccess convenience API.",
			"tags": [
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:discovery:content-access"
					]
				}
			],
			"params": [
				{
					"name": "ids",
					"summary": "A list of identifiers that represent content that is discoverable or consumable for the subscriber",
					"schema": {
						"$ref": "#/components/schemas/Discovery.ContentAccessIdentifiers"
					},
					"required": true
				}
			],
			"result": {
				"name": "result",
				"schema": {
					"const": null
				}
			},
			"examples": [
				{
					"name": "Update subscriber's availabilities",
					"params": [
						{
							"name": "ids",
							"value": {
								"availabilities": [
									{
										"type": "channel-lineup",
										"id": "partner.com/availability/123",
										"startTime": "2021-04-23T18:25:43.511Z",
										"endTime": "2021-04-23T18:25:43.511Z"
									},
									{
										"type": "channel-lineup",
										"id": "partner.com/availability/456",
										"startTime": "2021-04-23T18:25:43.511Z",
										"endTime": "2021-04-23T18:25:43.511Z"
									}
								]
							}
						}
					],
					"result": {
						"name": "result",
						"value": null
					}
				},
				{
					"name": "Update subscriber's availabilities and entitlements",
					"params": [
						{
							"name": "ids",
							"value": {
								"availabilities": [
									{
										"type": "channel-lineup",
										"id": "partner.com/availability/123",
										"startTime": "2021-04-23T18:25:43.511Z",
										"endTime": "2021-04-23T18:25:43.511Z"
									},
									{
										"type": "channel-lineup",
										"id": "partner.com/availability/456",
										"startTime": "2021-04-23T18:25:43.511Z",
										"endTime": "2021-04-23T18:25:43.511Z"
									}
								],
								"entitlements": [
									{
										"entitlementId": "123",
										"startTime": "2025-01-01T00:00:00.000Z",
										"endTime": "2025-01-01T00:00:00.000Z"
									}
								]
							}
						}
					],
					"result": {
						"name": "result",
						"value": null
					}
				},
				{
					"name": "Update subscriber's entitlements",
					"params": [
						{
							"name": "ids",
							"value": {
								"entitlements": [
									{
										"entitlementId": "123",
										"startTime": "2025-01-01T00:00:00.000Z",
										"endTime": "2025-01-01T00:00:00.000Z"
									}
								]
							}
						}
					],
					"result": {
						"name": "result",
						"value": null
					}
				},
				{
					"name": "Clear a subscriber's entitlements",
					"params": [
						{
							"name": "ids",
							"value": {
								"entitlements": []
							}
						}
					],
					"result": {
						"name": "result",
						"value": null
					}
				},
				{
					"name": "Clear a subscriber's availabilities",
					"params": [
						{
							"name": "ids",
							"value": {
								"availabilities": []
							}
						}
					],
					"result": {
						"name": "result",
						"value": null
					}
				}
			]
		},
		{
			"name": "Discovery.clearContentAccess",
			"summary": "Clear both availabilities and entitlements from the subscriber. This is equivalent of calling `Discovery.contentAccess({ availabilities: [], entitlements: []})`. This is typically called when the user signs out of an account.",
			"tags": [
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:discovery:content-access"
					]
				}
			],
			"params": [],
			"result": {
				"name": "result",
				"schema": {
					"const": null
				}
			},
			"examples": [
				{
					"name": "Clear subscriber's availabilities and entitlements",
					"params": [],
					"result": {
						"name": "result",
						"value": null
					}
				}
			]
		},
		{
			"name": "Discovery.launch",
			"tags": [
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:lifecycle:launch"
					]
				}
			],
			"summary": "Launch or foreground the specified app, and optionally instructs it to navigate to the specified user action. \n For the Primary Experience, the appId can be any one of:  \n\n - xrn:firebolt:application-type:main \n\n - xrn:firebolt:application-type:settings",
			"params": [
				{
					"name": "appId",
					"required": true,
					"summary": "The durable app Id of the app to launch",
					"schema": {
						"type": "string"
					}
				},
				{
					"name": "intent",
					"required": false,
					"summary": "An optional `NavigationIntent` with details about what part of the app to show first, and context around how/why it was launched",
					"schema": {
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/NavigationIntent"
					}
				}
			],
			"result": {
				"name": "success",
				"summary": "whether the call was successful or not",
				"schema": {
					"type": "boolean"
				}
			},
			"examples": [
				{
					"name": "Launch the 'Foo' app to it's home screen.",
					"params": [
						{
							"name": "appId",
							"value": "foo"
						},
						{
							"name": "intent",
							"value": {
								"action": "home",
								"context": {
									"source": "voice"
								}
							}
						}
					],
					"result": {
						"name": "success",
						"value": true
					}
				},
				{
					"name": "Launch the 'Foo' app to it's own page for a specific entity.",
					"params": [
						{
							"name": "appId",
							"value": "foo"
						},
						{
							"name": "intent",
							"value": {
								"action": "entity",
								"data": {
									"entityType": "program",
									"programType": "movie",
									"entityId": "example-movie-id"
								},
								"context": {
									"source": "voice"
								}
							}
						}
					],
					"result": {
						"name": "success",
						"value": true
					}
				},
				{
					"name": "Launch the 'Foo' app to a fullscreen playback experience for a specific entity.",
					"params": [
						{
							"name": "appId",
							"value": "foo"
						},
						{
							"name": "intent",
							"value": {
								"action": "playback",
								"data": {
									"entityType": "program",
									"programType": "movie",
									"entityId": "example-movie-id"
								},
								"context": {
									"source": "voice"
								}
							}
						}
					],
					"result": {
						"name": "success",
						"value": true
					}
				},
				{
					"name": "Launch the Aggregated Experience to a global page for a specific entity.",
					"params": [
						{
							"name": "appId",
							"value": "xrn:firebolt:application-type:main"
						},
						{
							"name": "intent",
							"value": {
								"action": "entity",
								"data": {
									"entityType": "program",
									"programType": "movie",
									"entityId": "example-movie-id"
								},
								"context": {
									"source": "voice"
								}
							}
						}
					],
					"result": {
						"name": "success",
						"value": true
					}
				},
				{
					"name": "Launch the Aggregated Experience to a global page for the company / partner with the ID 'foo'.",
					"params": [
						{
							"name": "appId",
							"value": "xrn:firebolt:application-type:main"
						},
						{
							"name": "intent",
							"value": {
								"action": "section",
								"data": {
									"sectionName": "company:foo"
								},
								"context": {
									"source": "voice"
								}
							}
						}
					],
					"result": {
						"name": "success",
						"value": true
					}
				},
				{
					"name": "Launch the Aggregated Experience to it's home screen, as if the Home remote button was pressed.",
					"params": [
						{
							"name": "appId",
							"value": "xrn:firebolt:application-type:main"
						},
						{
							"name": "intent",
							"value": {
								"action": "home",
								"context": {
									"source": "voice"
								}
							}
						}
					],
					"result": {
						"name": "success",
						"value": true
					}
				},
				{
					"name": "Launch the Aggregated Experience to it's search screen.",
					"params": [
						{
							"name": "appId",
							"value": "xrn:firebolt:application-type:main"
						},
						{
							"name": "intent",
							"value": {
								"action": "search",
								"context": {
									"source": "voice"
								}
							}
						}
					],
					"result": {
						"name": "success",
						"value": true
					}
				},
				{
					"name": "Launch the Aggregated Experience to it's settings screen.",
					"params": [
						{
							"name": "appId",
							"value": "xrn:firebolt:application-type:settings"
						},
						{
							"name": "intent",
							"value": {
								"action": "section",
								"data": {
									"sectionName": "settings"
								},
								"context": {
									"source": "voice"
								}
							}
						}
					],
					"result": {
						"name": "success",
						"value": true
					}
				},
				{
					"name": "Launch the Aggregated Experience to it's linear/epg guide.",
					"params": [
						{
							"name": "appId",
							"value": "xrn:firebolt:application-type:main"
						},
						{
							"name": "intent",
							"value": {
								"action": "section",
								"data": {
									"sectionName": "guide"
								},
								"context": {
									"source": "voice"
								}
							}
						}
					],
					"result": {
						"name": "success",
						"value": true
					}
				},
				{
					"name": "Launch the Aggregated Experience to the App Store details page for a specific app with the ID 'foo'.",
					"params": [
						{
							"name": "appId",
							"value": "xrn:firebolt:application-type:main "
						},
						{
							"name": "intent",
							"value": {
								"action": "section",
								"data": {
									"sectionName": "app:foo"
								},
								"context": {
									"source": "voice"
								}
							}
						}
					],
					"result": {
						"name": "success",
						"value": true
					}
				}
			]
		},
		{
			"name": "Discovery.signIn",
			"tags": [
				{
					"name": "calls-metrics"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:discovery:sign-in-status"
					]
				}
			],
			"summary": "Inform the platform that your user is signed in, for increased visibility in search & discovery. Sign-in state is used separately from what content can be access through entitlements and availabilities. Sign-in state may be used when deciding whether to choose this app to handle a user intent. For instance, if the user tries to launch something generic like playing music from an artist, only a signed-in app will be chosen. If the user wants to tune to a channel, only a signed-in app will be chosen to handle that intent. While signIn can optionally include entitlements as those typically change at signIn time, it is recommended to make a separate call to Discovery.contentAccess for entitlements. signIn is not only for when a user explicitly enters login credentials. If an app does not require any credentials from the user to consume content, such as in a free app, then the app should call signIn immediately on launch.",
			"params": [
				{
					"name": "entitlements",
					"summary": "Optional array of Entitlements, in case of a different user account, or a long time since last sign-in.",
					"schema": {
						"type": "array",
						"items": {
							"$ref": "https://meta.rdkcentral.com/firebolt/schemas/entertainment#/definitions/Entitlement"
						}
					},
					"required": false
				}
			],
			"result": {
				"name": "success",
				"schema": {
					"type": "boolean"
				}
			},
			"examples": [
				{
					"name": "Send signIn metric",
					"params": [],
					"result": {
						"name": "success",
						"value": true
					}
				},
				{
					"name": "Send signIn notification with entitlements",
					"params": [
						{
							"name": "entitlements",
							"value": [
								{
									"entitlementId": "123",
									"startTime": "2025-01-01T00:00:00.000Z",
									"endTime": "2025-01-01T00:00:00.000Z"
								}
							]
						}
					],
					"result": {
						"name": "success",
						"value": true
					}
				}
			]
		},
		{
			"name": "Discovery.signOut",
			"tags": [
				{
					"name": "calls-metrics"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:discovery:sign-in-status"
					]
				}
			],
			"summary": "Inform the platform that your user has signed out. See `Discovery.signIn` for more details on how the sign-in state is used.signOut will NOT clear entitlements, the app should make a separate call to Discovery.clearContentAccess. Apps should also call signOut when a login token has expired and the user is now in a signed-out state.",
			"params": [],
			"result": {
				"name": "success",
				"schema": {
					"type": "boolean"
				}
			},
			"examples": [
				{
					"name": "Send signOut notification",
					"params": [],
					"result": {
						"name": "success",
						"value": true
					}
				}
			]
		},
		{
			"name": "Discovery.onNavigateTo",
			"tags": [
				{
					"name": "event",
					"x-notifier": "Discovery.navigateTo"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:discovery:navigate-to"
					]
				}
			],
			"summary": "listen to `navigateTo` events",
			"params": [
				{
					"name": "listen",
					"schema": {
						"type": "boolean"
					}
				}
			],
			"examples": [
				{
					"name": "Listening for `navigateTo` events",
					"params": [
						{
							"name": "listen",
							"value": true
						}
					],
					"result": {
						"name": "result",
						"value": null
					}
				}
			],
			"result": {
				"name": "result",
				"schema": {
					"type": "null"
				}
			}
		},
		{
			"name": "Discovery.onPolicyChanged",
			"summary": "get the discovery policy",
			"params": [
				{
					"name": "listen",
					"schema": {
						"type": "boolean"
					}
				}
			],
			"tags": [
				{
					"name": "event",
					"x-notifier": "Discovery.policyChanged",
					"x-subscriber-for": "Discovery.policy"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:discovery:policy"
					]
				}
			],
			"examples": [
				{
					"name": "Getting the discovery policy",
					"params": [
						{
							"name": "listen",
							"value": true
						}
					],
					"result": {
						"name": "result",
						"value": null
					}
				}
			],
			"result": {
				"name": "result",
				"schema": {
					"type": "null"
				}
			}
		},
		{
			"name": "Discovery.onPullEntityInfo",
			"tags": [
				{
					"name": "polymorphic-pull-event"
				},
				{
					"name": "event",
					"x-pulls-for": "Discovery.entityInfo",
					"x-notifier": "Discovery.pullEntityInfo"
				},
				{
					"name": "capabilities",
					"x-provides": "xrn:firebolt:capability:discovery:entity-info"
				},
				{
					"name": "deprecated"
				}
			],
			"summary": "Provide information about a program entity and its available watchable assets, such as entitlement status and price, via either a push or pull call flow.",
			"description": "Provide information about a program entity and its available watchable assets, such as entitlement status and price, via either a push or pull call flow. Includes information about the program entity and its relevant associated entities, such as extras, previews, and, in the case of TV series, seasons and episodes.\n\nSee the `EntityInfo` and `WayToWatch` data structures below for more information.\n\nThe app only needs to implement Pull support for `entityInfo` at this time.",
			"params": [
				{
					"name": "listen",
					"schema": {
						"type": "boolean"
					}
				}
			],
			"examples": [
				{
					"name": "Send entity info for a movie to the platform.",
					"params": [
						{
							"name": "listen",
							"value": true
						}
					],
					"result": {
						"name": "result",
						"value": null
					}
				},
				{
					"name": "Send entity info for a movie with a trailer to the platform.",
					"params": [
						{
							"name": "listen",
							"value": true
						}
					],
					"result": {
						"name": "result",
						"value": null
					}
				},
				{
					"name": "Send entity info for a TV Series with seasons and episodes to the platform.",
					"params": [
						{
							"name": "listen",
							"value": true
						}
					],
					"result": {
						"name": "result",
						"value": null
					}
				}
			],
			"result": {
				"name": "result",
				"schema": {
					"type": "null"
				}
			}
		},
		{
			"name": "Discovery.onPullPurchasedContent",
			"tags": [
				{
					"name": "polymorphic-pull-event"
				},
				{
					"name": "event",
					"x-pulls-for": "Discovery.purchasedContent",
					"x-notifier": "Discovery.pullPurchasedContent"
				},
				{
					"name": "capabilities",
					"x-provides": "xrn:firebolt:capability:discovery:purchased-content"
				},
				{
					"name": "deprecated"
				}
			],
			"summary": "Provide a list of purchased content for the authenticated account, such as rentals and electronic sell through purchases.",
			"params": [
				{
					"name": "listen",
					"schema": {
						"type": "boolean"
					}
				}
			],
			"examples": [
				{
					"name": "Inform the platform of the user's purchased content",
					"params": [
						{
							"name": "listen",
							"value": true
						}
					],
					"result": {
						"name": "result",
						"value": null
					}
				}
			],
			"description": "Return content purchased by the user, such as rentals and electronic sell through purchases.\n\nThe app should return the user's 100 most recent purchases in `entries`. The total count of purchases must be provided in `count`. If `count` is greater than the total number of `entries`, the UI may provide a link into the app to see the complete purchase list.\n\nThe `EntityInfo` object returned is not required to have `waysToWatch` populated, but it is recommended that it do so in case the UI wants to surface additional information on the purchases screen.\n\nThe app should implement both Push and Pull methods for `purchasedContent`.\n\nThe app should actively push `purchasedContent` when:\n\n*  The app becomes Active.\n*  When the state of the purchasedContent set has changed.\n*  The app goes into Inactive or Background state, if there is a chance a change event has been missed.",
			"result": {
				"name": "result",
				"schema": {
					"type": "null"
				}
			}
		},
		{
			"name": "Discovery.provide",
			"tags": [
				{
					"name": "registration",
					"x-interface": "Discovery"
				},
				{
					"name": "capabilities",
					"x-provides": "xrn:firebolt:capability:discovery:entity-info"
				}
			],
			"params": [
				{
					"name": "enabled",
					"schema": {
						"type": "boolean"
					}
				}
			],
			"result": {
				"name": "result",
				"schema": {
					"type": "null"
				}
			},
			"examples": [
				{
					"name": "Default example",
					"params": [
						{
							"name": "enabled",
							"value": true
						}
					],
					"result": {
						"name": "result",
						"value": null
					}
				}
			]
		},
		{
			"name": "Internal.initialize",
			"tags": [
				{
					"name": "rpc-only"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:lifecycle:initialize"
					]
				}
			],
			"summary": "Initialize the SDK / FEE session.",
			"description": "A single version of the Firebolt SDK is compiled into each app. When an app starts up, the SDK **MUST** call this method as soon as possible and **before** any other JSON-RPC methods are sent.",
			"params": [
				{
					"name": "version",
					"required": true,
					"schema": {
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/types#/definitions/SemanticVersion"
					},
					"summary": "The semantic version of the SDK."
				}
			],
			"result": {
				"name": "session",
				"summary": "Info about the SDK/FEE session",
				"schema": {
					"type": "object",
					"required": [
						"version"
					],
					"properties": {
						"version": {
							"$ref": "https://meta.rdkcentral.com/firebolt/schemas/types#/definitions/SemanticVersion",
							"description": "The semantic version of the FEE."
						}
					},
					"additionalProperties": false
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "version",
							"value": {
								"major": 1,
								"minor": 0,
								"patch": 0,
								"readable": "Firebolt SDK 1.0.0"
							}
						}
					],
					"result": {
						"name": "Default Result",
						"value": {
							"version": {
								"major": 1,
								"minor": 0,
								"patch": 0,
								"readable": "Firebolt FEE 1.0.0"
							}
						}
					}
				}
			]
		},
		{
			"name": "Keyboard.email",
			"tags": [
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:input:keyboard"
					],
					"x-provided-by": "Keyboard.email",
					"x-allow-focus": true
				}
			],
			"summary": "Prompt the user for their email address with a simplified list of choices.",
			"params": [
				{
					"name": "type",
					"summary": "Why the email is being requested, e.g. sign on or sign up",
					"required": true,
					"schema": {
						"$ref": "#/components/schemas/Keyboard.EmailUsage"
					}
				},
				{
					"name": "message",
					"summary": "The message to display while prompting",
					"required": false,
					"schema": {
						"type": "string"
					}
				}
			],
			"result": {
				"name": "email",
				"summary": "the selected or entered email",
				"schema": {
					"type": "string"
				}
			},
			"examples": [
				{
					"name": "Prompt the user to select or type an email address",
					"params": [
						{
							"name": "type",
							"value": "signIn"
						},
						{
							"name": "message",
							"value": "Enter your email to sign into this app"
						}
					],
					"result": {
						"name": "Default Result",
						"value": "user@domain.com"
					}
				},
				{
					"name": "Prompt the user to type an email address to sign up",
					"params": [
						{
							"name": "type",
							"value": "signUp"
						},
						{
							"name": "message",
							"value": "Enter your email to sign up for this app"
						}
					],
					"result": {
						"name": "Default Result",
						"value": "user@domain.com"
					}
				}
			]
		},
		{
			"name": "Keyboard.password",
			"tags": [
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:input:keyboard"
					],
					"x-provided-by": "Keyboard.password",
					"x-allow-focus": true
				}
			],
			"summary": "Show the password entry keyboard, with typing obfuscated from visibility",
			"params": [
				{
					"name": "message",
					"summary": "The message to display while prompting",
					"required": false,
					"schema": {
						"type": "string"
					}
				}
			],
			"result": {
				"name": "value",
				"summary": "the selected or entered password",
				"schema": {
					"type": "string"
				}
			},
			"examples": [
				{
					"name": "Prompt the user to enter their password",
					"params": [
						{
							"name": "message",
							"value": "Enter your password"
						}
					],
					"result": {
						"name": "Default Result",
						"value": "abc123"
					}
				}
			]
		},
		{
			"name": "Keyboard.standard",
			"tags": [
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:input:keyboard"
					],
					"x-provided-by": "Keyboard.standard",
					"x-allow-focus": true
				}
			],
			"summary": "Show the standard platform keyboard, and return the submitted value",
			"params": [
				{
					"name": "message",
					"summary": "The message to display while prompting",
					"required": true,
					"schema": {
						"type": "string"
					}
				}
			],
			"result": {
				"name": "value",
				"summary": "the selected or entered text",
				"schema": {
					"type": "string"
				}
			},
			"examples": [
				{
					"name": "Prompt the user for an arbitrary string",
					"params": [
						{
							"name": "message",
							"value": "Enter the name you'd like to associate with this device"
						}
					],
					"result": {
						"name": "Default Result",
						"value": "Living Room"
					}
				}
			]
		},
		{
			"name": "Lifecycle.ready",
			"tags": [
				{
					"name": "calls-metrics"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:lifecycle:ready"
					]
				},
				{
					"name": "exclude-from-sdk"
				}
			],
			"summary": "Notify the platform that the app is ready",
			"params": [],
			"result": {
				"name": "result",
				"schema": {
					"const": null
				}
			},
			"examples": [
				{
					"name": "Let the platform know that your app is ready",
					"params": [],
					"result": {
						"name": "Default Result",
						"value": null
					}
				}
			]
		},
		{
			"name": "Lifecycle.close",
			"tags": [
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:lifecycle:state"
					]
				}
			],
			"summary": "Request that the platform move your app out of focus",
			"params": [
				{
					"name": "reason",
					"summary": "The reason the app is requesting to be closed",
					"required": true,
					"schema": {
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/lifecycle#/definitions/CloseReason"
					}
				}
			],
			"result": {
				"name": "success",
				"schema": {
					"const": null
				}
			},
			"examples": [
				{
					"name": "Close the app when the user presses back on the app home screen",
					"params": [
						{
							"name": "reason",
							"value": "remoteButton"
						}
					],
					"result": {
						"name": "Default Result",
						"value": null
					}
				},
				{
					"name": "Close the app when the user selects an exit menu item",
					"params": [
						{
							"name": "reason",
							"value": "userExit"
						}
					],
					"result": {
						"name": "Default Result",
						"value": null
					}
				}
			]
		},
		{
			"name": "Lifecycle.finished",
			"tags": [
				{
					"name": "exclude-from-sdk"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:lifecycle:state"
					]
				}
			],
			"summary": "Notify the platform that the app is done unloading",
			"params": [],
			"result": {
				"name": "results",
				"schema": {
					"const": null
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [],
					"result": {
						"name": "Default Result",
						"value": null
					}
				}
			]
		},
		{
			"name": "Lifecycle.state",
			"summary": "Get the current state of the app. This function is **synchronous**.",
			"tags": [
				{
					"name": "synchronous"
				},
				{
					"name": "exclude-from-sdk"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:lifecycle:state"
					]
				}
			],
			"params": [],
			"result": {
				"name": "state",
				"summary": "the current state of the app.",
				"schema": {
					"$ref": "https://meta.rdkcentral.com/firebolt/schemas/lifecycle#/definitions/LifecycleState"
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [],
					"result": {
						"name": "Default Result",
						"value": "foreground"
					}
				}
			]
		},
		{
			"name": "Lifecycle.onInactive",
			"tags": [
				{
					"name": "event",
					"x-notifier": "Lifecycle.inactive"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:lifecycle:state"
					]
				}
			],
			"summary": "Listen to the inactive event",
			"params": [
				{
					"name": "listen",
					"schema": {
						"type": "boolean"
					}
				}
			],
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "listen",
							"value": true
						}
					],
					"result": {
						"name": "result",
						"value": null
					}
				}
			],
			"result": {
				"name": "result",
				"schema": {
					"type": "null"
				}
			}
		},
		{
			"name": "Lifecycle.onForeground",
			"tags": [
				{
					"name": "event",
					"x-notifier": "Lifecycle.foreground"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:lifecycle:state"
					]
				}
			],
			"summary": "Listen to the foreground event",
			"params": [
				{
					"name": "listen",
					"schema": {
						"type": "boolean"
					}
				}
			],
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "listen",
							"value": true
						}
					],
					"result": {
						"name": "result",
						"value": null
					}
				},
				{
					"name": "Move to foreground via remote branded buton",
					"params": [
						{
							"name": "listen",
							"value": true
						}
					],
					"result": {
						"name": "result",
						"value": null
					}
				}
			],
			"result": {
				"name": "result",
				"schema": {
					"type": "null"
				}
			}
		},
		{
			"name": "Lifecycle.onBackground",
			"tags": [
				{
					"name": "event",
					"x-notifier": "Lifecycle.background"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:lifecycle:state"
					]
				}
			],
			"summary": "Listen to the background event",
			"params": [
				{
					"name": "listen",
					"schema": {
						"type": "boolean"
					}
				}
			],
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "listen",
							"value": true
						}
					],
					"result": {
						"name": "result",
						"value": null
					}
				}
			],
			"result": {
				"name": "result",
				"schema": {
					"type": "null"
				}
			}
		},
		{
			"name": "Lifecycle.onSuspended",
			"tags": [
				{
					"name": "event",
					"x-notifier": "Lifecycle.suspended"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:lifecycle:state"
					]
				}
			],
			"summary": "Listen to the suspended event",
			"params": [
				{
					"name": "listen",
					"schema": {
						"type": "boolean"
					}
				}
			],
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "listen",
							"value": true
						}
					],
					"result": {
						"name": "result",
						"value": null
					}
				}
			],
			"result": {
				"name": "result",
				"schema": {
					"type": "null"
				}
			}
		},
		{
			"name": "Lifecycle.onUnloading",
			"tags": [
				{
					"name": "event",
					"x-notifier": "Lifecycle.unloading"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:lifecycle:state"
					]
				}
			],
			"summary": "Listen to the unloading event",
			"params": [
				{
					"name": "listen",
					"schema": {
						"type": "boolean"
					}
				}
			],
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "listen",
							"value": true
						}
					],
					"result": {
						"name": "result",
						"value": null
					}
				}
			],
			"result": {
				"name": "result",
				"schema": {
					"type": "null"
				}
			}
		},
		{
			"name": "Localization.locality",
			"tags": [
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:localization:locality"
					]
				},
				{
					"name": "property"
				}
			],
			"summary": "Get the locality/city the device is located in",
			"params": [],
			"result": {
				"name": "locality",
				"summary": "the device city",
				"schema": {
					"$ref": "https://meta.rdkcentral.com/firebolt/schemas/localization#/definitions/Locality"
				}
			},
			"examples": [
				{
					"name": "Default example #1",
					"params": [],
					"result": {
						"name": "Default Result",
						"value": "Philadelphia"
					}
				},
				{
					"name": "Default example #2",
					"params": [],
					"result": {
						"name": "Default Result",
						"value": "Rockville"
					}
				}
			]
		},
		{
			"name": "Localization.postalCode",
			"tags": [
				{
					"name": "property"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:localization:postal-code"
					]
				}
			],
			"summary": "Get the postal code the device is located in",
			"params": [],
			"result": {
				"name": "postalCode",
				"summary": "the device postal code",
				"schema": {
					"type": "string"
				}
			},
			"examples": [
				{
					"name": "Default example #1",
					"params": [],
					"result": {
						"name": "Default Result",
						"value": "19103"
					}
				},
				{
					"name": "Default example #2",
					"params": [],
					"result": {
						"name": "Default Result",
						"value": "20850"
					}
				}
			]
		},
		{
			"name": "Localization.countryCode",
			"tags": [
				{
					"name": "property"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:localization:country-code"
					]
				}
			],
			"summary": "Get the ISO 3166-1 alpha-2 code for the country device is located in",
			"params": [],
			"result": {
				"name": "code",
				"summary": "the device country code",
				"schema": {
					"$ref": "https://meta.rdkcentral.com/firebolt/schemas/localization#/definitions/CountryCode"
				}
			},
			"examples": [
				{
					"name": "Default example #1",
					"params": [],
					"result": {
						"name": "Default Result",
						"value": "US"
					}
				},
				{
					"name": "Default example #2",
					"params": [],
					"result": {
						"name": "Default Result",
						"value": "UK"
					}
				}
			]
		},
		{
			"name": "Localization.language",
			"summary": "Get the ISO 639 1/2 code for the preferred language",
			"params": [],
			"tags": [
				{
					"name": "deprecated",
					"x-since": "0.17.0",
					"x-alternative": "Localization.locale"
				},
				{
					"name": "property"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:localization:language"
					]
				}
			],
			"result": {
				"name": "lang",
				"summary": "the device language",
				"schema": {
					"$ref": "https://meta.rdkcentral.com/firebolt/schemas/localization#/definitions/Language"
				}
			},
			"examples": [
				{
					"name": "Default example #1",
					"params": [],
					"result": {
						"name": "Default Result",
						"value": "en"
					}
				},
				{
					"name": "Default example #2",
					"params": [],
					"result": {
						"name": "Default Result",
						"value": "es"
					}
				}
			]
		},
		{
			"name": "Localization.preferredAudioLanguages",
			"summary": "A prioritized list of ISO 639 1/2 codes for the preferred audio languages on this device.",
			"params": [],
			"tags": [
				{
					"name": "property"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:localization:language"
					]
				}
			],
			"result": {
				"name": "languages",
				"summary": "the preferred audio languages",
				"schema": {
					"type": "array",
					"items": {
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/localization#/definitions/ISO639_2Language"
					}
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [],
					"result": {
						"name": "Default Result",
						"value": [
							"spa",
							"eng"
						]
					}
				},
				{
					"name": "Default Example #2",
					"params": [],
					"result": {
						"name": "Default Result",
						"value": [
							"eng",
							"spa"
						]
					}
				}
			]
		},
		{
			"name": "Localization.locale",
			"tags": [
				{
					"name": "property"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:localization:locale"
					]
				}
			],
			"summary": "Get the *full* BCP 47 code, including script, region, variant, etc., for the preferred langauage/locale",
			"params": [],
			"result": {
				"name": "locale",
				"summary": "the device locale",
				"schema": {
					"$ref": "https://meta.rdkcentral.com/firebolt/schemas/localization#/definitions/Locale"
				}
			},
			"examples": [
				{
					"name": "Default example #1",
					"params": [],
					"result": {
						"name": "Default Result",
						"value": "en-US"
					}
				},
				{
					"name": "Default example #2",
					"params": [],
					"result": {
						"name": "Default Result",
						"value": "es-US"
					}
				}
			]
		},
		{
			"name": "Localization.latlon",
			"tags": [
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:localization:location"
					]
				}
			],
			"summary": "Get the approximate latitude and longitude coordinates of the device location",
			"params": [],
			"result": {
				"name": "latlong",
				"summary": "lat/long tuple",
				"schema": {
					"$ref": "#/components/schemas/Localization.LatLon"
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [],
					"result": {
						"name": "Default Result",
						"value": [
							39.9549,
							75.1699
						]
					}
				}
			]
		},
		{
			"name": "Localization.additionalInfo",
			"tags": [
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:localization:additional-info"
					]
				}
			],
			"summary": "Get any platform-specific localization information, in an Map<string, string>",
			"params": [],
			"result": {
				"name": "info",
				"summary": "the additional info",
				"schema": {
					"type": "object",
					"additionalProperties": {
						"type": "string",
						"maxLength": 1024
					},
					"maxProperties": 32
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [],
					"result": {
						"name": "info",
						"value": {}
					}
				}
			]
		},
		{
			"name": "Localization.onLocalityChanged",
			"tags": [
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:localization:locality"
					]
				},
				{
					"name": "event",
					"x-notifier": "Localization.localityChanged",
					"x-subscriber-for": "Localization.locality"
				}
			],
			"summary": "Get the locality/city the device is located in",
			"params": [
				{
					"name": "listen",
					"schema": {
						"type": "boolean"
					}
				}
			],
			"examples": [
				{
					"name": "Default example #1",
					"params": [
						{
							"name": "listen",
							"value": true
						}
					],
					"result": {
						"name": "result",
						"value": null
					}
				},
				{
					"name": "Default example #2",
					"params": [
						{
							"name": "listen",
							"value": true
						}
					],
					"result": {
						"name": "result",
						"value": null
					}
				}
			],
			"result": {
				"name": "result",
				"schema": {
					"type": "null"
				}
			}
		},
		{
			"name": "Localization.onPostalCodeChanged",
			"tags": [
				{
					"name": "event",
					"x-notifier": "Localization.postalCodeChanged",
					"x-subscriber-for": "Localization.postalCode"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:localization:postal-code"
					]
				}
			],
			"summary": "Get the postal code the device is located in",
			"params": [
				{
					"name": "listen",
					"schema": {
						"type": "boolean"
					}
				}
			],
			"examples": [
				{
					"name": "Default example #1",
					"params": [
						{
							"name": "listen",
							"value": true
						}
					],
					"result": {
						"name": "result",
						"value": null
					}
				},
				{
					"name": "Default example #2",
					"params": [
						{
							"name": "listen",
							"value": true
						}
					],
					"result": {
						"name": "result",
						"value": null
					}
				}
			],
			"result": {
				"name": "result",
				"schema": {
					"type": "null"
				}
			}
		},
		{
			"name": "Localization.onCountryCodeChanged",
			"tags": [
				{
					"name": "event",
					"x-notifier": "Localization.countryCodeChanged",
					"x-subscriber-for": "Localization.countryCode"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:localization:country-code"
					]
				}
			],
			"summary": "Get the ISO 3166-1 alpha-2 code for the country device is located in",
			"params": [
				{
					"name": "listen",
					"schema": {
						"type": "boolean"
					}
				}
			],
			"examples": [
				{
					"name": "Default example #1",
					"params": [
						{
							"name": "listen",
							"value": true
						}
					],
					"result": {
						"name": "result",
						"value": null
					}
				},
				{
					"name": "Default example #2",
					"params": [
						{
							"name": "listen",
							"value": true
						}
					],
					"result": {
						"name": "result",
						"value": null
					}
				}
			],
			"result": {
				"name": "result",
				"schema": {
					"type": "null"
				}
			}
		},
		{
			"name": "Localization.onLanguageChanged",
			"summary": "Get the ISO 639 1/2 code for the preferred language",
			"params": [
				{
					"name": "listen",
					"schema": {
						"type": "boolean"
					}
				}
			],
			"tags": [
				{
					"name": "deprecated",
					"x-since": "0.17.0",
					"x-alternative": "Localization.locale"
				},
				{
					"name": "event",
					"x-notifier": "Localization.languageChanged",
					"x-subscriber-for": "Localization.language"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:localization:language"
					]
				}
			],
			"examples": [
				{
					"name": "Default example #1",
					"params": [
						{
							"name": "listen",
							"value": true
						}
					],
					"result": {
						"name": "result",
						"value": null
					}
				},
				{
					"name": "Default example #2",
					"params": [
						{
							"name": "listen",
							"value": true
						}
					],
					"result": {
						"name": "result",
						"value": null
					}
				}
			],
			"result": {
				"name": "result",
				"schema": {
					"type": "null"
				}
			}
		},
		{
			"name": "Localization.onPreferredAudioLanguagesChanged",
			"summary": "A prioritized list of ISO 639 1/2 codes for the preferred audio languages on this device.",
			"params": [
				{
					"name": "listen",
					"schema": {
						"type": "boolean"
					}
				}
			],
			"tags": [
				{
					"name": "event",
					"x-notifier": "Localization.preferredAudioLanguagesChanged",
					"x-subscriber-for": "Localization.preferredAudioLanguages"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:localization:language"
					]
				}
			],
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "listen",
							"value": true
						}
					],
					"result": {
						"name": "result",
						"value": null
					}
				},
				{
					"name": "Default Example #2",
					"params": [
						{
							"name": "listen",
							"value": true
						}
					],
					"result": {
						"name": "result",
						"value": null
					}
				}
			],
			"result": {
				"name": "result",
				"schema": {
					"type": "null"
				}
			}
		},
		{
			"name": "Localization.onLocaleChanged",
			"tags": [
				{
					"name": "event",
					"x-notifier": "Localization.localeChanged",
					"x-subscriber-for": "Localization.locale"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:localization:locale"
					]
				}
			],
			"summary": "Get the *full* BCP 47 code, including script, region, variant, etc., for the preferred langauage/locale",
			"params": [
				{
					"name": "listen",
					"schema": {
						"type": "boolean"
					}
				}
			],
			"examples": [
				{
					"name": "Default example #1",
					"params": [
						{
							"name": "listen",
							"value": true
						}
					],
					"result": {
						"name": "result",
						"value": null
					}
				},
				{
					"name": "Default example #2",
					"params": [
						{
							"name": "listen",
							"value": true
						}
					],
					"result": {
						"name": "result",
						"value": null
					}
				}
			],
			"result": {
				"name": "result",
				"schema": {
					"type": "null"
				}
			}
		},
		{
			"name": "Metrics.ready",
			"tags": [
				{
					"name": "rpc-only"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:metrics:general"
					]
				}
			],
			"summary": "Inform the platform that your app is minimally usable. This method is called automatically by `Lifecycle.ready()`",
			"params": [],
			"result": {
				"name": "success",
				"schema": {
					"type": "boolean"
				}
			},
			"examples": [
				{
					"name": "Send ready metric",
					"params": [],
					"result": {
						"name": "success",
						"value": true
					}
				}
			]
		},
		{
			"name": "Metrics.signIn",
			"tags": [
				{
					"name": "rpc-only"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:metrics:general"
					]
				}
			],
			"summary": "Log a sign in event, called by Discovery.signIn().",
			"params": [],
			"result": {
				"name": "success",
				"schema": {
					"type": "boolean"
				}
			},
			"examples": [
				{
					"name": "Send signIn metric",
					"params": [],
					"result": {
						"name": "success",
						"value": true
					}
				},
				{
					"name": "Send signIn metric with entitlements",
					"params": [
						{
							"name": "entitlements",
							"value": [
								{
									"entitlementId": "123",
									"startTime": "2025-01-01T00:00:00.000Z",
									"endTime": "2025-01-01T00:00:00.000Z"
								}
							]
						}
					],
					"result": {
						"name": "success",
						"value": true
					}
				}
			]
		},
		{
			"name": "Metrics.signOut",
			"tags": [
				{
					"name": "rpc-only"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:metrics:general"
					]
				}
			],
			"summary": "Log a sign out event, called by Discovery.signOut().",
			"params": [],
			"result": {
				"name": "success",
				"schema": {
					"type": "boolean"
				}
			},
			"examples": [
				{
					"name": "Send signOut metric",
					"params": [],
					"result": {
						"name": "success",
						"value": true
					}
				}
			]
		},
		{
			"name": "Metrics.startContent",
			"tags": [
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:metrics:general"
					]
				}
			],
			"summary": "Inform the platform that your user has started content.",
			"params": [
				{
					"name": "entityId",
					"summary": "Optional entity ID of the content.",
					"schema": {
						"type": "string"
					},
					"required": false
				}
			],
			"result": {
				"name": "success",
				"schema": {
					"type": "boolean"
				}
			},
			"examples": [
				{
					"name": "Send startContent metric",
					"params": [],
					"result": {
						"name": "success",
						"value": true
					}
				},
				{
					"name": "Send startContent metric w/ entity",
					"params": [
						{
							"name": "entityId",
							"value": "abc"
						}
					],
					"result": {
						"name": "success",
						"value": true
					}
				}
			]
		},
		{
			"name": "Metrics.stopContent",
			"tags": [
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:metrics:general"
					]
				}
			],
			"summary": "Inform the platform that your user has stopped content.",
			"params": [
				{
					"name": "entityId",
					"summary": "Optional entity ID of the content.",
					"schema": {
						"type": "string"
					},
					"required": false
				}
			],
			"result": {
				"name": "success",
				"schema": {
					"type": "boolean"
				}
			},
			"examples": [
				{
					"name": "Send stopContent metric",
					"params": [],
					"result": {
						"name": "success",
						"value": true
					}
				},
				{
					"name": "Send stopContent metric w/ entity",
					"params": [
						{
							"name": "entityId",
							"value": "abc"
						}
					],
					"result": {
						"name": "success",
						"value": true
					}
				}
			]
		},
		{
			"name": "Metrics.page",
			"tags": [
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:metrics:general"
					]
				}
			],
			"summary": "Inform the platform that your user has navigated to a page or view.",
			"params": [
				{
					"name": "pageId",
					"summary": "Page ID of the content.",
					"schema": {
						"type": "string"
					},
					"required": true
				}
			],
			"result": {
				"name": "success",
				"schema": {
					"type": "boolean"
				}
			},
			"examples": [
				{
					"name": "Send page metric",
					"params": [
						{
							"name": "pageId",
							"value": "xyz"
						}
					],
					"result": {
						"name": "success",
						"value": true
					}
				},
				{
					"name": "Send startContent metric w/ entity",
					"params": [
						{
							"name": "pageId",
							"value": "home"
						}
					],
					"result": {
						"name": "success",
						"value": true
					}
				}
			]
		},
		{
			"name": "Metrics.action",
			"tags": [
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:metrics:general"
					]
				}
			],
			"summary": "Inform the platform of something not covered by other Metrics APIs.",
			"params": [
				{
					"name": "category",
					"summary": "The category of action being logged. Must be 'user' for user-initated actions or 'app' for all other actions",
					"schema": {
						"type": "string",
						"enum": [
							"user",
							"app"
						]
					},
					"required": true
				},
				{
					"name": "type",
					"summary": "A short, indexible identifier for the action, e.g. 'SignIn Prompt Displayed'",
					"schema": {
						"type": "string",
						"maxLength": 256
					},
					"required": true
				},
				{
					"name": "parameters",
					"schema": {
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/types#/definitions/FlatMap"
					},
					"required": false
				}
			],
			"result": {
				"name": "success",
				"schema": {
					"type": "boolean"
				}
			},
			"examples": [
				{
					"name": "Send foo action",
					"params": [
						{
							"name": "category",
							"value": "user"
						},
						{
							"name": "type",
							"value": "The user did foo"
						}
					],
					"result": {
						"name": "success",
						"value": true
					}
				}
			]
		},
		{
			"name": "Metrics.error",
			"tags": [
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:metrics:general"
					]
				}
			],
			"summary": "Inform the platform of an error that has occured in your app.",
			"params": [
				{
					"name": "type",
					"summary": "The type of error",
					"schema": {
						"$ref": "#/components/schemas/Metrics.ErrorType"
					},
					"required": true
				},
				{
					"name": "code",
					"summary": "an app-specific error code",
					"schema": {
						"type": "string"
					},
					"required": true
				},
				{
					"name": "description",
					"summary": "A short description of the error",
					"schema": {
						"type": "string"
					},
					"required": true
				},
				{
					"name": "visible",
					"summary": "Whether or not this error was visible to the user.",
					"schema": {
						"type": "boolean"
					},
					"required": true
				},
				{
					"name": "parameters",
					"summary": "Optional additional parameters to be logged with the error",
					"schema": {
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/types#/definitions/FlatMap"
					},
					"required": false
				}
			],
			"result": {
				"name": "success",
				"schema": {
					"type": "boolean"
				}
			},
			"examples": [
				{
					"name": "Send error metric",
					"params": [
						{
							"name": "type",
							"value": "media"
						},
						{
							"name": "code",
							"value": "MEDIA-STALLED"
						},
						{
							"name": "description",
							"value": "playback stalled"
						},
						{
							"name": "visible",
							"value": true
						}
					],
					"result": {
						"name": "success",
						"value": true
					}
				}
			]
		},
		{
			"name": "Metrics.mediaLoadStart",
			"tags": [
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:metrics:media"
					]
				}
			],
			"summary": "Called when setting the URL of a media asset to play, in order to infer load time.",
			"params": [
				{
					"name": "entityId",
					"summary": "The entityId of the media.",
					"schema": {
						"type": "string"
					},
					"required": true
				}
			],
			"result": {
				"name": "success",
				"schema": {
					"type": "boolean"
				}
			},
			"examples": [
				{
					"name": "Send loadstart metric.",
					"params": [
						{
							"name": "entityId",
							"value": "345"
						}
					],
					"result": {
						"name": "success",
						"value": true
					}
				}
			]
		},
		{
			"name": "Metrics.mediaPlay",
			"tags": [
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:metrics:media"
					]
				}
			],
			"summary": "Called when media playback should start due to autoplay, user-initiated play, or unpausing.",
			"params": [
				{
					"name": "entityId",
					"summary": "The entityId of the media.",
					"schema": {
						"type": "string"
					},
					"required": true
				}
			],
			"result": {
				"name": "success",
				"schema": {
					"type": "boolean"
				}
			},
			"examples": [
				{
					"name": "Send play metric.",
					"params": [
						{
							"name": "entityId",
							"value": "345"
						}
					],
					"result": {
						"name": "success",
						"value": true
					}
				}
			]
		},
		{
			"name": "Metrics.mediaPlaying",
			"tags": [
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:metrics:media"
					]
				}
			],
			"summary": "Called when media playback actually starts due to autoplay, user-initiated play, unpausing, or recovering from a buffering interuption.",
			"params": [
				{
					"name": "entityId",
					"summary": "The entityId of the media.",
					"schema": {
						"type": "string"
					},
					"required": true
				}
			],
			"result": {
				"name": "success",
				"schema": {
					"type": "boolean"
				}
			},
			"examples": [
				{
					"name": "Send playing metric.",
					"params": [
						{
							"name": "entityId",
							"value": "345"
						}
					],
					"result": {
						"name": "success",
						"value": true
					}
				}
			]
		},
		{
			"name": "Metrics.mediaPause",
			"tags": [
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:metrics:media"
					]
				}
			],
			"summary": "Called when media playback will pause due to an intentional pause operation.",
			"params": [
				{
					"name": "entityId",
					"summary": "The entityId of the media.",
					"schema": {
						"type": "string"
					},
					"required": true
				}
			],
			"result": {
				"name": "success",
				"schema": {
					"type": "boolean"
				}
			},
			"examples": [
				{
					"name": "Send pause metric.",
					"params": [
						{
							"name": "entityId",
							"value": "345"
						}
					],
					"result": {
						"name": "success",
						"value": true
					}
				}
			]
		},
		{
			"name": "Metrics.mediaWaiting",
			"tags": [
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:metrics:media"
					]
				}
			],
			"summary": "Called when media playback will halt due to a network, buffer, or other unintentional constraint.",
			"params": [
				{
					"name": "entityId",
					"summary": "The entityId of the media.",
					"schema": {
						"type": "string"
					},
					"required": true
				}
			],
			"result": {
				"name": "success",
				"schema": {
					"type": "boolean"
				}
			},
			"examples": [
				{
					"name": "Send waiting metric.",
					"params": [
						{
							"name": "entityId",
							"value": "345"
						}
					],
					"result": {
						"name": "success",
						"value": true
					}
				}
			]
		},
		{
			"name": "Metrics.mediaProgress",
			"tags": [
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:metrics:media"
					]
				}
			],
			"summary": "Called every 60 seconds as media playback progresses.",
			"params": [
				{
					"name": "entityId",
					"summary": "The entityId of the media.",
					"schema": {
						"type": "string"
					},
					"required": true
				},
				{
					"name": "progress",
					"summary": "Progress of playback, as a decimal percentage (0-0.999) for content with a known duration, or an integer number of seconds (0-86400) for content with an unknown duration.",
					"schema": {
						"$ref": "#/components/schemas/Metrics.MediaPosition"
					},
					"required": true
				}
			],
			"result": {
				"name": "success",
				"schema": {
					"type": "boolean"
				}
			},
			"examples": [
				{
					"name": "Send progress metric.",
					"params": [
						{
							"name": "entityId",
							"value": "345"
						},
						{
							"name": "progress",
							"value": 0.75
						}
					],
					"result": {
						"name": "success",
						"value": true
					}
				}
			]
		},
		{
			"name": "Metrics.mediaSeeking",
			"tags": [
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:metrics:media"
					]
				}
			],
			"summary": "Called when a seek is initiated during media playback.",
			"params": [
				{
					"name": "entityId",
					"summary": "The entityId of the media.",
					"schema": {
						"type": "string"
					},
					"required": true
				},
				{
					"name": "target",
					"summary": "Target destination of the seek, as a decimal percentage (0-0.999) for content with a known duration, or an integer number of seconds (0-86400) for content with an unknown duration.",
					"schema": {
						"$ref": "#/components/schemas/Metrics.MediaPosition"
					},
					"required": true
				}
			],
			"result": {
				"name": "success",
				"schema": {
					"type": "boolean"
				}
			},
			"examples": [
				{
					"name": "Send seeking metric.",
					"params": [
						{
							"name": "entityId",
							"value": "345"
						},
						{
							"name": "target",
							"value": 0.5
						}
					],
					"result": {
						"name": "success",
						"value": true
					}
				}
			]
		},
		{
			"name": "Metrics.mediaSeeked",
			"tags": [
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:metrics:media"
					]
				}
			],
			"summary": "Called when a seek is completed during media playback.",
			"params": [
				{
					"name": "entityId",
					"summary": "The entityId of the media.",
					"schema": {
						"type": "string"
					},
					"required": true
				},
				{
					"name": "position",
					"summary": "Resulting position of the seek operation, as a decimal percentage (0-0.999) for content with a known duration, or an integer number of seconds (0-86400) for content with an unknown duration.",
					"schema": {
						"$ref": "#/components/schemas/Metrics.MediaPosition"
					},
					"required": true
				}
			],
			"result": {
				"name": "success",
				"schema": {
					"type": "boolean"
				}
			},
			"examples": [
				{
					"name": "Send seeked metric.",
					"params": [
						{
							"name": "entityId",
							"value": "345"
						},
						{
							"name": "position",
							"value": 0.51
						}
					],
					"result": {
						"name": "success",
						"value": true
					}
				}
			]
		},
		{
			"name": "Metrics.mediaRateChange",
			"tags": [
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:metrics:media"
					]
				}
			],
			"summary": "Called when the playback rate of media is changed.",
			"params": [
				{
					"name": "entityId",
					"summary": "The entityId of the media.",
					"schema": {
						"type": "string"
					},
					"required": true
				},
				{
					"name": "rate",
					"summary": "The new playback rate.",
					"schema": {
						"type": "number"
					},
					"required": true
				}
			],
			"result": {
				"name": "success",
				"schema": {
					"type": "boolean"
				}
			},
			"examples": [
				{
					"name": "Send ratechange metric.",
					"params": [
						{
							"name": "entityId",
							"value": "345"
						},
						{
							"name": "rate",
							"value": 2
						}
					],
					"result": {
						"name": "success",
						"value": true
					}
				}
			]
		},
		{
			"name": "Metrics.mediaRenditionChange",
			"tags": [
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:metrics:media"
					]
				}
			],
			"summary": "Called when the playback rendition (e.g. bitrate, dimensions, profile, etc) is changed.",
			"params": [
				{
					"name": "entityId",
					"summary": "The entityId of the media.",
					"schema": {
						"type": "string"
					},
					"required": true
				},
				{
					"name": "bitrate",
					"summary": "The new bitrate in kbps.",
					"schema": {
						"type": "number"
					},
					"required": true
				},
				{
					"name": "width",
					"summary": "The new resolution width.",
					"schema": {
						"type": "number"
					},
					"required": true
				},
				{
					"name": "height",
					"summary": "The new resolution height.",
					"schema": {
						"type": "number"
					},
					"required": true
				},
				{
					"name": "profile",
					"summary": "A description of the new profile, e.g. 'HDR' etc.",
					"schema": {
						"type": "string"
					},
					"required": false
				}
			],
			"result": {
				"name": "success",
				"schema": {
					"type": "boolean"
				}
			},
			"examples": [
				{
					"name": "Send renditionchange metric.",
					"params": [
						{
							"name": "entityId",
							"value": "345"
						},
						{
							"name": "bitrate",
							"value": 5000
						},
						{
							"name": "width",
							"value": 1920
						},
						{
							"name": "height",
							"value": 1080
						},
						{
							"name": "profile",
							"value": "HDR+"
						}
					],
					"result": {
						"name": "success",
						"value": true
					}
				}
			]
		},
		{
			"name": "Metrics.mediaEnded",
			"tags": [
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:metrics:media"
					]
				}
			],
			"summary": "Called when playback has stopped because the end of the media was reached.",
			"params": [
				{
					"name": "entityId",
					"summary": "The entityId of the media.",
					"schema": {
						"type": "string"
					},
					"required": true
				}
			],
			"result": {
				"name": "success",
				"schema": {
					"type": "boolean"
				}
			},
			"examples": [
				{
					"name": "Send ended metric.",
					"params": [
						{
							"name": "entityId",
							"value": "345"
						}
					],
					"result": {
						"name": "success",
						"value": true
					}
				}
			]
		},
		{
			"name": "Parameters.initialization",
			"tags": [
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:lifecycle:state"
					]
				}
			],
			"summary": "Returns any initialization parameters for the app, e.g. initialial `NavigationIntent`.",
			"params": [],
			"result": {
				"name": "init",
				"summary": "The initialization parameters.",
				"schema": {
					"$ref": "#/components/schemas/Parameters.AppInitialization"
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [],
					"result": {
						"name": "init",
						"value": {
							"lmt": 0,
							"us_privacy": "1-Y-",
							"discovery": {
								"navigateTo": {
									"action": "entity",
									"data": {
										"entityId": "abc",
										"entityType": "program",
										"programType": "movie"
									},
									"context": {
										"source": "voice"
									}
								}
							}
						}
					}
				}
			]
		},
		{
			"name": "Profile.approveContentRating",
			"tags": [
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:approve:content"
					]
				}
			],
			"summary": "Verifies that the current profile should have access to mature/adult content.",
			"params": [],
			"result": {
				"name": "allow",
				"summary": "Whether or not to allow access",
				"schema": {
					"type": "boolean"
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [],
					"result": {
						"name": "allow",
						"value": false
					}
				}
			]
		},
		{
			"name": "Profile.approvePurchase",
			"tags": [
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:approve:purchase"
					]
				}
			],
			"summary": "Verifies that the current profile should have access to making purchases.",
			"params": [],
			"result": {
				"name": "allow",
				"summary": "Whether or not to allow access",
				"schema": {
					"type": "boolean"
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [],
					"result": {
						"name": "allow",
						"value": false
					}
				}
			]
		},
		{
			"name": "Profile.flags",
			"tags": [
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:profile:flags"
					]
				}
			],
			"summary": "Get a map of profile flags for the current session.",
			"params": [],
			"result": {
				"name": "flags",
				"summary": "The profile flags.",
				"schema": {
					"$ref": "https://meta.rdkcentral.com/firebolt/schemas/types#/definitions/FlatMap"
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [],
					"result": {
						"name": "flags",
						"value": {
							"userExperience": "1000"
						}
					}
				}
			]
		},
		{
			"name": "SecondScreen.protocols",
			"summary": "Get the supported second screen discovery protocols",
			"tags": [
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:secondscreen:protocol"
					]
				}
			],
			"params": [],
			"result": {
				"name": "protocols",
				"summary": "the supported protocols",
				"schema": {
					"$ref": "https://meta.rdkcentral.com/firebolt/schemas/types#/definitions/BooleanMap"
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [],
					"result": {
						"name": "Default Result",
						"value": {
							"dial1.7": true
						}
					}
				}
			]
		},
		{
			"name": "SecondScreen.device",
			"tags": [
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:protocol:dial"
					]
				}
			],
			"summary": "Get the broadcasted id for the device",
			"params": [
				{
					"name": "type",
					"summary": "The type of second screen protocol, e.g. \"dial\"",
					"required": false,
					"schema": {
						"type": "string"
					}
				}
			],
			"result": {
				"name": "deviceId",
				"summary": "the device id",
				"schema": {
					"type": "string"
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [],
					"result": {
						"name": "Default Result",
						"value": "device-id"
					}
				}
			]
		},
		{
			"name": "SecondScreen.friendlyName",
			"summary": "Get the broadcasted friendly name for the device",
			"params": [],
			"tags": [
				{
					"name": "property:readonly"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:protocol:dial"
					]
				}
			],
			"result": {
				"name": "friendlyName",
				"summary": "the device friendly-name",
				"schema": {
					"type": "string"
				}
			},
			"examples": [
				{
					"name": "Default Example",
					"params": [],
					"result": {
						"name": "friendlyName",
						"value": "Living Room"
					}
				}
			]
		},
		{
			"name": "SecondScreen.onLaunchRequest",
			"tags": [
				{
					"name": "event",
					"x-notifier": "SecondScreen.launchRequest"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:protocol:dial"
					]
				}
			],
			"summary": "Listen to the launchRequest event",
			"params": [
				{
					"name": "listen",
					"schema": {
						"type": "boolean"
					}
				}
			],
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "listen",
							"value": true
						}
					],
					"result": {
						"name": "result",
						"value": null
					}
				}
			],
			"result": {
				"name": "result",
				"schema": {
					"type": "null"
				}
			}
		},
		{
			"name": "SecondScreen.onCloseRequest",
			"tags": [
				{
					"name": "event",
					"x-notifier": "SecondScreen.closeRequest"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:protocol:dial"
					]
				}
			],
			"summary": "Listen to the closeRequest event",
			"params": [
				{
					"name": "listen",
					"schema": {
						"type": "boolean"
					}
				}
			],
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "listen",
							"value": true
						}
					],
					"result": {
						"name": "result",
						"value": null
					}
				}
			],
			"result": {
				"name": "result",
				"schema": {
					"type": "null"
				}
			}
		},
		{
			"name": "SecondScreen.onFriendlyNameChanged",
			"summary": "Get the broadcasted friendly name for the device",
			"params": [
				{
					"name": "listen",
					"schema": {
						"type": "boolean"
					}
				}
			],
			"tags": [
				{
					"name": "event",
					"x-notifier": "SecondScreen.friendlyNameChanged",
					"x-subscriber-for": "SecondScreen.friendlyName"
				},
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:protocol:dial"
					]
				}
			],
			"examples": [
				{
					"name": "Default Example",
					"params": [
						{
							"name": "listen",
							"value": true
						}
					],
					"result": {
						"name": "result",
						"value": null
					}
				}
			],
			"result": {
				"name": "result",
				"schema": {
					"type": "null"
				}
			}
		},
		{
			"name": "SecureStorage.get",
			"summary": "Get stored value by key",
			"tags": [
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:storage:secure"
					]
				}
			],
			"params": [
				{
					"name": "scope",
					"summary": "The scope of the key/value",
					"schema": {
						"$ref": "#/components/schemas/SecureStorage.StorageScope"
					},
					"required": true
				},
				{
					"name": "key",
					"summary": "Key to get",
					"schema": {
						"type": "string"
					},
					"required": true
				}
			],
			"result": {
				"name": "value",
				"summary": "The retrieved value, if found.",
				"schema": {
					"oneOf": [
						{
							"type": "string"
						},
						{
							"type": "null"
						}
					]
				}
			},
			"examples": [
				{
					"name": "Successfully retrieve a refresh token with key authRefreshToken",
					"params": [
						{
							"name": "scope",
							"value": "device"
						},
						{
							"name": "key",
							"value": "authRefreshToken"
						}
					],
					"result": {
						"name": "value",
						"value": "VGhpcyBub3QgYSByZWFsIHRva2VuLgo="
					}
				},
				{
					"name": "Attempt to retrieve a key with no value set",
					"params": [
						{
							"name": "scope",
							"value": "account"
						},
						{
							"name": "key",
							"value": "authRefreshToken"
						}
					],
					"result": {
						"name": "value",
						"value": null
					}
				}
			]
		},
		{
			"name": "SecureStorage.set",
			"summary": "Set or update a secure data value",
			"tags": [
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:storage:secure"
					]
				}
			],
			"params": [
				{
					"name": "scope",
					"summary": "The scope of the data key",
					"schema": {
						"$ref": "#/components/schemas/SecureStorage.StorageScope"
					},
					"required": true
				},
				{
					"name": "key",
					"summary": "Key to set",
					"schema": {
						"type": "string"
					},
					"required": true
				},
				{
					"name": "value",
					"summary": "Value to set",
					"schema": {
						"type": "string"
					},
					"required": true
				},
				{
					"name": "options",
					"summary": "Optional parameters to set",
					"schema": {
						"$ref": "#/components/schemas/SecureStorage.StorageOptions"
					},
					"required": false
				}
			],
			"result": {
				"name": "success",
				"schema": {
					"const": null
				}
			},
			"examples": [
				{
					"name": "Set a refresh token with name authRefreshToken with optional paramter",
					"params": [
						{
							"name": "scope",
							"value": "device"
						},
						{
							"name": "key",
							"value": "authRefreshToken"
						},
						{
							"name": "value",
							"value": "VGhpcyBub3QgYSByZWFsIHRva2VuLgo="
						},
						{
							"name": "options",
							"value": {
								"ttl": 600
							}
						}
					],
					"result": {
						"name": "defaultResult",
						"value": null
					}
				},
				{
					"name": "Set a refresh token with name authRefreshToken without optional parameter",
					"params": [
						{
							"name": "scope",
							"value": "account"
						},
						{
							"name": "key",
							"value": "authRefreshToken"
						},
						{
							"name": "value",
							"value": "VGhpcyBub3QgYSByZWFsIHRva2VuLgo="
						}
					],
					"result": {
						"name": "defaultResult",
						"value": null
					}
				}
			]
		},
		{
			"name": "SecureStorage.remove",
			"summary": "Remove a secure data value",
			"tags": [
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:storage:secure"
					]
				}
			],
			"params": [
				{
					"name": "scope",
					"summary": "The scope of the data key",
					"schema": {
						"$ref": "#/components/schemas/SecureStorage.StorageScope"
					},
					"required": true
				},
				{
					"name": "key",
					"summary": "Key to remove",
					"schema": {
						"type": "string"
					},
					"required": true
				}
			],
			"result": {
				"name": "success",
				"summary": "",
				"schema": {
					"const": null
				}
			},
			"examples": [
				{
					"name": "Remove the value with key authRefreshToken for device",
					"params": [
						{
							"name": "scope",
							"value": "device"
						},
						{
							"name": "key",
							"value": "authRefreshToken"
						}
					],
					"result": {
						"name": "defaultResult",
						"value": null
					}
				},
				{
					"name": "Remove the value with key authRefreshToken for account",
					"params": [
						{
							"name": "scope",
							"value": "account"
						},
						{
							"name": "key",
							"value": "authRefreshToken"
						}
					],
					"result": {
						"name": "defaultResult",
						"value": null
					}
				}
			]
		},
		{
			"name": "SecureStorage.clear",
			"summary": "Clears all the secure data values",
			"tags": [
				{
					"name": "capabilities",
					"x-uses": [
						"xrn:firebolt:capability:storage:secure"
					]
				}
			],
			"params": [
				{
					"name": "scope",
					"summary": "The scope of the key/value",
					"schema": {
						"$ref": "#/components/schemas/SecureStorage.StorageScope"
					},
					"required": true
				}
			],
			"result": {
				"name": "success",
				"summary": "",
				"schema": {
					"const": null
				}
			},
			"examples": [
				{
					"name": "Clears all the data values of storage",
					"params": [
						{
							"name": "scope",
							"value": "account"
						}
					],
					"result": {
						"name": "defaultResult",
						"value": null
					}
				}
			]
		}
	],
	"components": {
		"schemas": {
			"Accessibility.AudioDescriptionSettings": {
				"title": "AudioDescriptionSettings",
				"type": "object",
				"required": [
					"enabled"
				],
				"properties": {
					"enabled": {
						"type": "boolean",
						"description": "Whether or not audio descriptions should be enabled by default"
					}
				}
			},
			"Advertising.AdConfigurationOptions": {
				"title": "AdConfigurationOptions",
				"type": "object",
				"properties": {
					"coppa": {
						"type": "boolean",
						"description": "Whether or not the app requires US COPPA compliance."
					},
					"environment": {
						"type": "string",
						"enum": [
							"prod",
							"test"
						],
						"default": "prod",
						"description": "Whether the app is running in a production or test mode."
					},
					"authenticationEntity": {
						"type": "string",
						"description": "The authentication provider, when it is separate entity than the app provider, e.g. an MVPD."
					}
				}
			},
			"Advertising.AdPolicy": {
				"title": "AdPolicy",
				"description": "Describes various ad playback enforcement rules that the app should follow.",
				"type": "object",
				"properties": {
					"skipRestriction": {
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/advertising#/definitions/SkipRestriction"
					},
					"limitAdTracking": {
						"type": "boolean"
					}
				}
			},
			"Advertising.AdvertisingIdOptions": {
				"title": "AdvertisingIdOptions",
				"type": "object",
				"properties": {
					"scope": {
						"type": "object",
						"description": "Provides the options to send scope type and id to select desired advertising id",
						"required": [
							"type",
							"id"
						],
						"properties": {
							"type": {
								"type": "string",
								"enum": [
									"browse",
									"content"
								],
								"default": "browse",
								"description": "The scope type, which will determine where to show advertisement"
							},
							"id": {
								"type": "string",
								"description": "A value that identifies a specific scope within the scope type"
							}
						}
					}
				}
			},
			"Authentication.TokenType": {
				"title": "TokenType",
				"type": "string",
				"enum": [
					"platform",
					"device",
					"distributor"
				]
			},
			"Capabilities.CapabilityOption": {
				"title": "CapabilityOption",
				"type": "object",
				"properties": {
					"role": {
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/capabilities#/definitions/Role",
						"description": "Which role of the capability to check the state of, default will be 'use'",
						"default": "use"
					}
				}
			},
			"Device.DeviceVersion": {
				"title": "DeviceVersion",
				"type": "object",
				"properties": {
					"sdk": {
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/types#/definitions/SemanticVersion",
						"description": "The Firebolt SDK version"
					},
					"api": {
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/types#/definitions/SemanticVersion",
						"description": "The latest Firebolt API version supported by the current device."
					},
					"firmware": {
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/types#/definitions/SemanticVersion",
						"description": "The firmware version as reported by the device"
					},
					"os": {
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/types#/definitions/SemanticVersion",
						"description": "**Deprecated** Use `firmware`, instead."
					},
					"debug": {
						"type": "string",
						"description": "Detailed version as a string, for debugging purposes"
					}
				},
				"required": [
					"api",
					"firmware",
					"os"
				]
			},
			"Device.HDCPVersionMap": {
				"title": "HDCPVersionMap",
				"type": "object",
				"properties": {
					"hdcp1.4": {
						"type": "boolean"
					},
					"hdcp2.2": {
						"type": "boolean"
					}
				},
				"required": [
					"hdcp1.4",
					"hdcp2.2"
				],
				"description": "The type of HDCP versions"
			},
			"Device.HDRFormatMap": {
				"title": "HDRFormatMap",
				"type": "object",
				"properties": {
					"hdr10": {
						"type": "boolean"
					},
					"hdr10Plus": {
						"type": "boolean"
					},
					"dolbyVision": {
						"type": "boolean"
					},
					"hlg": {
						"type": "boolean"
					}
				},
				"required": [
					"hdr10",
					"hdr10Plus",
					"dolbyVision",
					"hlg"
				],
				"description": "The type of HDR format"
			},
			"Device.AudioProfiles": {
				"title": "AudioProfiles",
				"type": "object",
				"properties": {
					"stereo": {
						"type": "boolean"
					},
					"dolbyDigital5.1": {
						"type": "boolean"
					},
					"dolbyDigital5.1+": {
						"type": "boolean"
					},
					"dolbyAtmos": {
						"type": "boolean"
					}
				},
				"required": [
					"stereo",
					"dolbyDigital5.1",
					"dolbyDigital5.1+",
					"dolbyAtmos"
				]
			},
			"Device.Resolution": {
				"type": "array",
				"items": [
					{
						"type": "integer"
					},
					{
						"type": "integer"
					}
				],
				"additionalItems": false,
				"minItems": 2,
				"maxItems": 2
			},
			"Device.NetworkInfoResult": {
				"title": "NetworkInfoResult",
				"type": "object",
				"properties": {
					"state": {
						"$ref": "#/components/schemas/Device.NetworkState"
					},
					"type": {
						"$ref": "#/components/schemas/Device.NetworkType"
					}
				},
				"required": [
					"state",
					"type"
				]
			},
			"Discovery.DiscoveryPolicy": {
				"title": "DiscoveryPolicy",
				"type": "object",
				"required": [
					"enableRecommendations",
					"shareWatchHistory",
					"rememberWatchedPrograms"
				],
				"properties": {
					"enableRecommendations": {
						"type": "boolean",
						"description": "Whether or not to the user has enabled history-based recommendations"
					},
					"shareWatchHistory": {
						"type": "boolean",
						"description": "Whether or not the user has enabled app watch history data to be shared with the platform"
					},
					"rememberWatchedPrograms": {
						"type": "boolean",
						"description": "Whether or not the user has enabled watch history"
					}
				}
			},
			"Discovery.ContentAccessIdentifiers": {
				"title": "ContentAccessIdentifiers",
				"type": "object",
				"properties": {
					"availabilities": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/Discovery.Availability"
						},
						"description": "A list of identifiers that represent what content is discoverable for the subscriber. Excluding availabilities will cause no change to the availabilities that are stored for this subscriber. Providing an empty array will clear the subscriber's availabilities"
					},
					"entitlements": {
						"type": "array",
						"items": {
							"$ref": "https://meta.rdkcentral.com/firebolt/schemas/entertainment#/definitions/Entitlement"
						},
						"description": "A list of identifiers that represent what content is consumable for the subscriber. Excluding entitlements will cause no change to the entitlements that are stored for this subscriber. Providing an empty array will clear the subscriber's entitlements"
					}
				},
				"required": []
			},
			"Keyboard.EmailUsage": {
				"title": "EmailUsage",
				"type": "string",
				"enum": [
					"signIn",
					"signUp"
				]
			},
			"Localization.LatLon": {
				"type": "array",
				"items": [
					{
						"type": "number"
					},
					{
						"type": "number"
					}
				],
				"additionalItems": false,
				"minItems": 2,
				"maxItems": 2
			},
			"Metrics.ErrorType": {
				"title": "ErrorType",
				"type": "string",
				"enum": [
					"network",
					"media",
					"restriction",
					"entitlement",
					"other"
				]
			},
			"Metrics.MediaPosition": {
				"title": "MediaPosition",
				"description": "Represents a position inside playback content, as a decimal percentage (0-0.999) for content with a known duration, or an integer number of seconds (0-86400) for content with an unknown duration.",
				"oneOf": [
					{
						"const": 0
					},
					{
						"type": "number",
						"exclusiveMinimum": 0,
						"exclusiveMaximum": 1
					},
					{
						"type": "integer",
						"minimum": 1,
						"maximum": 86400
					}
				]
			},
			"Parameters.AppInitialization": {
				"title": "AppInitialization",
				"type": "object",
				"properties": {
					"us_privacy": {
						"type": "string",
						"description": "The IAB US Privacy string."
					},
					"lmt": {
						"type": "integer",
						"description": "The IAB limit ad tracking opt out value."
					},
					"discovery": {
						"type": "object",
						"properties": {
							"navigateTo": {
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/NavigationIntent"
							}
						}
					},
					"secondScreen": {
						"type": "object",
						"properties": {
							"launchRequest": {
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/secondscreen#/definitions/SecondScreenEvent"
							}
						}
					}
				}
			},
			"SecureStorage.StorageScope": {
				"title": "StorageScope",
				"type": "string",
				"enum": [
					"device",
					"account"
				],
				"description": "The scope of the data"
			},
			"SecureStorage.StorageOptions": {
				"title": "StorageOptions",
				"type": "object",
				"required": [
					"ttl"
				],
				"properties": {
					"ttl": {
						"type": "number",
						"description": "Seconds from set time before the data expires and is removed"
					}
				}
			},
			"Device.NetworkState": {
				"title": "NetworkState",
				"type": "string",
				"enum": [
					"connected",
					"disconnected"
				],
				"description": "The type of network that is currently active"
			},
			"Device.NetworkType": {
				"title": "NetworkType",
				"type": "string",
				"enum": [
					"wifi",
					"ethernet",
					"hybrid"
				],
				"description": "The type of network that is currently active"
			},
			"Discovery.Availability": {
				"title": "Availability",
				"type": "object",
				"properties": {
					"type": {
						"type": "string",
						"enum": [
							"channel-lineup",
							"program-lineup"
						]
					},
					"id": {
						"type": "string"
					},
					"catalogId": {
						"type": "string"
					},
					"startTime": {
						"type": "string",
						"format": "date-time"
					},
					"endTime": {
						"type": "string",
						"format": "date-time"
					}
				},
				"required": [
					"type",
					"id"
				]
			},
			"https://meta.rdkcentral.com/firebolt/schemas/accessibility": {
				"$id": "https://meta.rdkcentral.com/firebolt/schemas/accessibility",
				"title": "Accessibility",
				"anyOf": [
					{
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/accessibility#/definitions/ClosedCaptionsStyles"
					},
					{
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/accessibility#/definitions/ClosedCaptionsSettings"
					}
				],
				"definitions": {
					"FontFamily": {
						"type": [
							"string",
							"null"
						],
						"enum": [
							"monospaced_serif",
							"proportional_serif",
							"monospaced_sanserif",
							"proportional_sanserif",
							"smallcaps",
							"cursive",
							"casual",
							null
						]
					},
					"FontSize": {
						"type": [
							"number",
							"null"
						],
						"minimum": 0
					},
					"FontEdge": {
						"type": [
							"string",
							"null"
						],
						"enum": [
							"none",
							"raised",
							"depressed",
							"uniform",
							"drop_shadow_left",
							"drop_shadow_right",
							null
						]
					},
					"Color": {
						"type": [
							"string",
							"null"
						]
					},
					"Opacity": {
						"type": [
							"number",
							"null"
						],
						"minimum": 0,
						"maximum": 100
					},
					"HorizontalAlignment": {
						"type": [
							"string",
							"null"
						]
					},
					"VerticalAlignment": {
						"type": [
							"string",
							"null"
						]
					},
					"ClosedCaptionsStyles": {
						"title": "ClosedCaptionsStyles",
						"type": "object",
						"description": "The default styles to use when displaying closed-captions",
						"properties": {
							"fontFamily": {
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/accessibility#/definitions/FontFamily"
							},
							"fontSize": {
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/accessibility#/definitions/FontSize"
							},
							"fontColor": {
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/accessibility#/definitions/Color"
							},
							"fontEdge": {
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/accessibility#/definitions/FontEdge"
							},
							"fontEdgeColor": {
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/accessibility#/definitions/Color"
							},
							"fontOpacity": {
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/accessibility#/definitions/Opacity"
							},
							"backgroundColor": {
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/accessibility#/definitions/Color"
							},
							"backgroundOpacity": {
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/accessibility#/definitions/Opacity"
							},
							"textAlign": {
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/accessibility#/definitions/HorizontalAlignment"
							},
							"textAlignVertical": {
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/accessibility#/definitions/VerticalAlignment"
							},
							"windowColor": {
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/accessibility#/definitions/Color"
							},
							"windowOpacity": {
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/accessibility#/definitions/Opacity"
							}
						}
					},
					"ClosedCaptionsSettings": {
						"title": "ClosedCaptionsSettings",
						"type": "object",
						"required": [
							"enabled"
						],
						"properties": {
							"enabled": {
								"type": "boolean",
								"description": "Whether or not closed-captions should be enabled by default"
							},
							"styles": {
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/accessibility#/definitions/ClosedCaptionsStyles"
							},
							"preferredLanguages": {
								"type": "array",
								"items": {
									"$ref": "https://meta.rdkcentral.com/firebolt/schemas/localization#/definitions/ISO639_2Language"
								}
							}
						},
						"examples": [
							{
								"enabled": true,
								"styles": {
									"fontFamily": "monospaced_serif",
									"fontSize": 1,
									"fontColor": "#ffffff",
									"fontEdge": "none",
									"fontEdgeColor": "#7F7F7F",
									"fontOpacity": 100,
									"backgroundColor": "#000000",
									"backgroundOpacity": 100,
									"textAlign": "center",
									"textAlignVertical": "middle",
									"windowColor": "white",
									"windowOpacity": 50
								},
								"preferredLanguages": [
									"eng",
									"spa"
								]
							}
						]
					},
					"SpeechRate": {
						"title": "SpeechRate",
						"type": "number",
						"minimum": 0.1,
						"maximum": 10
					},
					"VoiceGuidanceSettings": {
						"title": "VoiceGuidanceSettings",
						"type": "object",
						"required": [
							"enabled",
							"navigationHints",
							"rate"
						],
						"properties": {
							"enabled": {
								"type": "boolean",
								"description": "Whether or not voice guidance should be enabled by default"
							},
							"navigationHints": {
								"type": "boolean",
								"description": "Whether or not voice guidance should include additional navigation hints"
							},
							"rate": {
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/accessibility#/definitions/SpeechRate",
								"description": "The rate at which voice guidance speech will be read back to the user"
							},
							"speed": {
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/accessibility#/definitions/SpeechRate",
								"description": "**DEPRECATED** Use rate instead. The rate at which voice guidance speech will be read back to the user"
							}
						},
						"examples": [
							{
								"enabled": true,
								"navigationHints": true,
								"rate": 1,
								"speed": 1
							}
						]
					}
				}
			},
			"https://meta.rdkcentral.com/firebolt/schemas/capabilities": {
				"title": "Capabilities",
				"$id": "https://meta.rdkcentral.com/firebolt/schemas/capabilities",
				"oneOf": [
					{
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/capabilities#/definitions/Capability"
					},
					{
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/capabilities#/definitions/Role"
					},
					{
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/capabilities#/definitions/DenyReason"
					},
					{
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/capabilities#/definitions/CapabilityInfo"
					}
				],
				"definitions": {
					"Capability": {
						"title": "Capability",
						"type": "string",
						"description": "A Capability is a discrete unit of functionality that a Firebolt device might be able to perform.",
						"pattern": "^xrn:firebolt:capability:([a-z0-9\\-]+)((:[a-z0-9\\-]+)?)$"
					},
					"Role": {
						"title": "Role",
						"description": "Role provides access level for the app for a given capability.",
						"type": "string",
						"enum": [
							"use",
							"manage",
							"provide"
						]
					},
					"Permission": {
						"title": "Permission",
						"description": "A capability combined with a Role, which an app may be permitted (by a distributor) or granted (by an end user).",
						"type": "object",
						"required": [
							"capability"
						],
						"properties": {
							"role": {
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/capabilities#/definitions/Role"
							},
							"capability": {
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/capabilities#/definitions/Capability"
							}
						},
						"additionalProperties": false
					},
					"DenyReason": {
						"title": "DenyReason",
						"description": "Reasons why a Capability might not be invokable",
						"type": "string",
						"enum": [
							"unpermitted",
							"unsupported",
							"disabled",
							"unavailable",
							"grantDenied",
							"ungranted"
						]
					},
					"CapPermissionStatus": {
						"type": "object",
						"properties": {
							"permitted": {
								"type": "boolean",
								"description": "Provides info whether the capability is permitted"
							},
							"granted": {
								"oneOf": [
									{
										"type": "boolean",
										"description": "Provides info whether the capability is granted"
									},
									{
										"const": null
									}
								]
							}
						},
						"additionalProperties": false
					},
					"CapabilityInfo": {
						"title": "CapabilityInfo",
						"type": "object",
						"required": [
							"supported",
							"available",
							"use",
							"manage",
							"provide"
						],
						"properties": {
							"capability": {
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/capabilities#/definitions/Capability"
							},
							"supported": {
								"type": "boolean",
								"description": "Provides info whether the capability is supported"
							},
							"available": {
								"type": "boolean",
								"description": "Provides info whether the capability is available"
							},
							"use": {
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/capabilities#/definitions/CapPermissionStatus"
							},
							"manage": {
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/capabilities#/definitions/CapPermissionStatus"
							},
							"provide": {
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/capabilities#/definitions/CapPermissionStatus"
							},
							"details": {
								"type": "array",
								"items": {
									"$ref": "https://meta.rdkcentral.com/firebolt/schemas/capabilities#/definitions/DenyReason"
								},
								"minItems": 1,
								"maxItems": 6
							}
						},
						"additionalProperties": false,
						"examples": [
							{
								"capability": "xrn:firebolt:capability:keyboard",
								"supported": true,
								"available": true,
								"use": {
									"permitted": true,
									"granted": true
								},
								"manage": {
									"permitted": true,
									"granted": true
								},
								"provide": {
									"permitted": true,
									"granted": true
								}
							}
						]
					}
				}
			},
			"https://meta.rdkcentral.com/firebolt/schemas/discovery": {
				"title": "Discovery",
				"$id": "https://meta.rdkcentral.com/firebolt/schemas/discovery",
				"anyOf": [
					{
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/discovery#/definitions/PurchasedContentResult"
					}
				],
				"definitions": {
					"PurchasedContentResult": {
						"title": "PurchasedContentResult",
						"type": "object",
						"properties": {
							"expires": {
								"type": "string",
								"format": "date-time"
							},
							"totalCount": {
								"type": "integer",
								"minimum": 0
							},
							"entries": {
								"type": "array",
								"items": {
									"$ref": "https://meta.rdkcentral.com/firebolt/schemas/entertainment#/definitions/EntityInfo"
								}
							}
						},
						"required": [
							"expires",
							"totalCount",
							"entries"
						],
						"additionalProperties": false
					},
					"EntityInfoResult": {
						"title": "EntityInfoResult",
						"description": "The result for an `entityInfo()` push or pull.",
						"type": "object",
						"properties": {
							"expires": {
								"type": "string",
								"format": "date-time"
							},
							"entity": {
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/entertainment#/definitions/EntityInfo"
							},
							"related": {
								"type": "array",
								"items": {
									"$ref": "https://meta.rdkcentral.com/firebolt/schemas/entertainment#/definitions/EntityInfo"
								}
							}
						},
						"required": [
							"expires",
							"entity"
						],
						"additionalProperties": false
					}
				}
			},
			"https://meta.rdkcentral.com/firebolt/schemas/types": {
				"title": "Types",
				"$id": "https://meta.rdkcentral.com/firebolt/schemas/types",
				"definitions": {
					"SemanticVersion": {
						"title": "SemanticVersion",
						"type": "object",
						"properties": {
							"major": {
								"type": "integer",
								"minimum": 0
							},
							"minor": {
								"type": "integer",
								"minimum": 0
							},
							"patch": {
								"type": "integer",
								"minimum": 0
							},
							"readable": {
								"type": "string"
							}
						},
						"required": [
							"major",
							"minor",
							"patch",
							"readable"
						],
						"additionalProperties": false
					},
					"AudioProfile": {
						"title": "AudioProfile",
						"type": "string",
						"enum": [
							"stereo",
							"dolbyDigital5.1",
							"dolbyDigital7.1",
							"dolbyDigital5.1+",
							"dolbyDigital7.1+",
							"dolbyAtmos"
						]
					},
					"BooleanMap": {
						"title": "BooleanMap",
						"type": "object",
						"additionalProperties": {
							"type": "boolean"
						}
					},
					"FlatMap": {
						"title": "FlatMap",
						"type": "object",
						"additionalProperties": {
							"oneOf": [
								{
									"type": "string"
								},
								{
									"type": "number"
								},
								{
									"type": "boolean"
								}
							]
						}
					},
					"LocalizedString": {
						"title": "LocalizedString",
						"description": "Localized string supports either a simple `string` or a Map<string, string> of language codes to strings. When using a simple `string`, the current preferred langauge from `Localization.langauge()` is assumed.",
						"oneOf": [
							{
								"type": "string"
							},
							{
								"type": "object",
								"additionalProperties": {
									"type": "string"
								}
							}
						],
						"examples": [
							"A simple string, with no language code",
							{
								"en": "This is english",
								"es": "esto es español"
							}
						]
					}
				}
			},
			"https://meta.rdkcentral.com/firebolt/schemas/entertainment": {
				"title": "Entertainment",
				"$id": "https://meta.rdkcentral.com/firebolt/schemas/entertainment",
				"anyOf": [
					{
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/entertainment#/definitions/ProgramType"
					},
					{
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/entertainment#/definitions/Entitlement"
					},
					{
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/entertainment#/definitions/EntityInfo"
					},
					{
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/entertainment#/definitions/OfferingType"
					},
					{
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/entertainment#/definitions/WayToWatch"
					},
					{
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/entertainment#/definitions/ContentRating"
					},
					{
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/entertainment#/definitions/ContentIdentifiers"
					}
				],
				"definitions": {
					"ProgramType": {
						"title": "ProgramType",
						"type": "string",
						"description": "In the case of a program `entityType`, specifies the program type.",
						"enum": [
							"movie",
							"episode",
							"season",
							"series",
							"other",
							"preview",
							"extra",
							"concert",
							"sportingEvent",
							"advertisement",
							"musicVideo",
							"minisode"
						]
					},
					"MusicType": {
						"title": "MusicType",
						"type": "string",
						"description": "In the case of a music `entityType`, specifies the type of music entity.",
						"enum": [
							"song",
							"album"
						]
					},
					"Entitlement": {
						"title": "Entitlement",
						"type": "object",
						"properties": {
							"entitlementId": {
								"type": "string"
							},
							"startTime": {
								"type": "string",
								"format": "date-time"
							},
							"endTime": {
								"type": "string",
								"format": "date-time"
							}
						},
						"required": [
							"entitlementId"
						]
					},
					"EntityInfo": {
						"title": "EntityInfo",
						"description": "An EntityInfo object represents an \"entity\" on the platform. Currently, only entities of type `program` are supported. `programType` must be supplied to identify the program type.\n\nAdditionally, EntityInfo objects must specify a properly formed\nContentIdentifiers object, `entityType`, and `title`.  The app should provide\nthe `synopsis` property for a good user experience if the content\nmetadata is not available another way.\n\nThe ContentIdentifiers must be sufficient for navigating the user to the\nappropriate entity or detail screen via a `detail` intent or deep link.\n\nEntityInfo objects must provide at least one WayToWatch object when returned as\npart of an `entityInfo` method and a streamable asset is available to the user.\nIt is optional for the `purchasedContent` method, but recommended because the UI\nmay use those data.",
						"type": "object",
						"required": [
							"identifiers",
							"entityType",
							"title"
						],
						"properties": {
							"identifiers": {
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/entertainment#/definitions/ContentIdentifiers"
							},
							"title": {
								"type": "string",
								"description": "Title of the entity."
							},
							"entityType": {
								"type": "string",
								"enum": [
									"program",
									"music"
								],
								"description": "The type of the entity, e.g. `program` or `music`."
							},
							"programType": {
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/entertainment#/definitions/ProgramType"
							},
							"musicType": {
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/entertainment#/definitions/MusicType"
							},
							"synopsis": {
								"type": "string",
								"description": "Short description of the entity."
							},
							"seasonNumber": {
								"type": "number",
								"description": "For TV seasons, the season number. For TV episodes, the season that the episode belongs to."
							},
							"seasonCount": {
								"type": "number",
								"description": "For TV series, seasons, and episodes, the total number of seasons."
							},
							"episodeNumber": {
								"type": "number",
								"description": "For TV episodes, the episode number."
							},
							"episodeCount": {
								"type": "number",
								"description": "For TV seasons and episodes, the total number of episodes in the current season."
							},
							"releaseDate": {
								"type": "string",
								"format": "date-time",
								"description": "The date that the program or entity was released or first aired."
							},
							"contentRatings": {
								"type": "array",
								"items": {
									"$ref": "https://meta.rdkcentral.com/firebolt/schemas/entertainment#/definitions/ContentRating"
								},
								"description": "A list of ContentRating objects, describing the entity's ratings in various rating schemes."
							},
							"waysToWatch": {
								"type": "array",
								"items": {
									"$ref": "https://meta.rdkcentral.com/firebolt/schemas/entertainment#/definitions/WayToWatch"
								},
								"description": "An array of ways a user is might watch this entity, regardless of entitlements."
							}
						},
						"if": {
							"properties": {
								"entityType": {
									"const": "program"
								}
							}
						},
						"then": {
							"required": [
								"programType"
							],
							"not": {
								"required": [
									"musicType"
								]
							}
						},
						"else": {
							"required": [
								"musicType"
							],
							"not": {
								"required": [
									"programType"
								]
							}
						}
					},
					"OfferingType": {
						"title": "OfferingType",
						"type": "string",
						"enum": [
							"free",
							"subscribe",
							"buy",
							"rent"
						],
						"description": "The offering type of the WayToWatch."
					},
					"WayToWatch": {
						"title": "WayToWatch",
						"type": "object",
						"required": [
							"identifiers",
							"audioProfile"
						],
						"properties": {
							"identifiers": {
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/entertainment#/definitions/ContentIdentifiers"
							},
							"expires": {
								"type": "string",
								"format": "date-time",
								"description": "Time when the WayToWatch is no longer available."
							},
							"entitled": {
								"type": "boolean",
								"description": "Specify if the user is entitled to watch the entity."
							},
							"entitledExpires": {
								"type": "string",
								"format": "date-time",
								"description": "Time when the entity is no longer entitled."
							},
							"offeringType": {
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/entertainment#/definitions/OfferingType"
							},
							"hasAds": {
								"type": "boolean",
								"description": "True if the streamable asset contains ads."
							},
							"price": {
								"type": "number",
								"description": "For \"buy\" and \"rent\" WayToWatch, the price to buy or rent in the user's preferred currency."
							},
							"videoQuality": {
								"type": "array",
								"items": {
									"type": "string",
									"enum": [
										"SD",
										"HD",
										"UHD"
									]
								},
								"description": "List of the video qualities available via the WayToWatch."
							},
							"audioProfile": {
								"type": "array",
								"items": {
									"$ref": "https://meta.rdkcentral.com/firebolt/schemas/types#/definitions/AudioProfile"
								},
								"description": "List of the audio types available via the WayToWatch."
							},
							"audioLanguages": {
								"type": "array",
								"items": {
									"type": "string"
								},
								"description": "List of audio track languages available on the WayToWatch. The first is considered the primary language. Languages are expressed as ISO 639 1/2 codes."
							},
							"closedCaptions": {
								"type": "array",
								"items": {
									"type": "string"
								},
								"description": "List of languages for which closed captions are available on the WayToWatch. Languages are expressed as ISO 639 1/2 codes."
							},
							"subtitles": {
								"type": "array",
								"items": {
									"type": "string"
								},
								"description": "List of languages for which subtitles are available on the WayToWatch. Languages are expressed as ISO 639 1/2 codes."
							},
							"audioDescriptions": {
								"type": "array",
								"items": {
									"type": "string"
								},
								"description": "List of languages for which audio descriptions (DVD) as available on the WayToWatch. Languages are expressed as ISO 639 1/2 codes."
							}
						},
						"description": "A WayToWatch describes a way to watch a video program. It may describe a single\nstreamable asset or a set of streamable assets. For example, an app provider may\ndescribe HD, SD, and UHD assets as individual WayToWatch objects or rolled into\na single WayToWatch.\n\nIf the WayToWatch represents a single streamable asset, the provided\nContentIdentifiers must be sufficient to play back the specific asset when sent\nvia a playback intent or deep link. If the WayToWatch represents multiple\nstreamable assets, the provided ContentIdentifiers must be sufficient to\nplayback one of the assets represented with no user action. In this scenario,\nthe app SHOULD choose the best asset for the user based on their device and\nsettings. The ContentIdentifiers MUST also be sufficient for navigating the user\nto the appropriate entity or detail screen via an entity intent.\n\nThe app should set the `entitled` property to indicate if the user can watch, or\nnot watch, the asset without making a purchase. If the entitlement is known to\nexpire at a certain time (e.g., a rental), the app should also provide the\n`entitledExpires` property. If the entitlement is not expired, the UI will use\nthe `entitled` property to display watchable assets to the user, adjust how\nassets are presented to the user, and how intents into the app are generated.\nFor example, the the Aggregated Experience could render a \"Watch\" button for an\nentitled asset versus a \"Subscribe\" button for an non-entitled asset.\n\nThe app should set the `offeringType` to define how the content may be\nauthorized. The UI will use this to adjust how content is presented to the user.\n\nA single WayToWatch cannot represent streamable assets available via multiple\npurchase paths. If, for example, an asset has both Buy, Rent and Subscription\navailability, the three different entitlement paths MUST be represented as\nmultiple WayToWatch objects.\n\n`price` should be populated for WayToWatch objects with `buy` or `rent`\n`offeringType`. If the WayToWatch represents a set of assets with various price\npoints, the `price` provided must be the lowest available price."
					},
					"ContentRating": {
						"title": "ContentRating",
						"type": "object",
						"required": [
							"scheme",
							"rating"
						],
						"properties": {
							"scheme": {
								"type": "string",
								"enum": [
									"CA-Movie",
									"CA-TV",
									"CA-Movie-Fr",
									"CA-TV-Fr",
									"US-Movie",
									"US-TV"
								],
								"description": "The rating scheme."
							},
							"rating": {
								"type": "string",
								"description": "The content rating."
							},
							"advisories": {
								"type": "array",
								"items": {
									"type": "string"
								},
								"description": "Optional list of subratings or content advisories."
							}
						},
						"description": "A ContentRating represents an age or content based of an entity. Supported rating schemes and associated types are below.\n\n## United States\n\n`US-Movie` (MPAA):\n\nRatings: `NR`, `G`, `PG`, `PG13`, `R`, `NC17`\n\nAdvisories: `AT`, `BN`, `SL`, `SS`, `N`, `V`\n\n`US-TV` (Vchip):\n\nRatings: `TVY`, `TVY7`, `TVG`, `TVPG`, `TV14`, `TVMA`\n\nAdvisories: `FV`, `D`, `L`, `S`, `V`\n\n## Canada\n\n`CA-Movie` (OFRB):\n\nRatings: `G`, `PG`, `14A`, `18A`, `R`, `E`\n\n`CA-TV` (AGVOT)\n\nRatings: `E`, `C`, `C8`, `G`, `PG`, `14+`, `18+`\n\nAdvisories: `C`, `C8`, `G`, `PG`, `14+`, `18+`\n\n`CA-Movie-Fr` (Canadian French language movies):\n\nRatings: `G`, `8+`, `13+`, `16+`, `18+`\n\n`CA-TV-Fr` (Canadian French language TV):\n\nRatings: `G`, `8+`, `13+`, `16+`, `18+`\n"
					},
					"ContentIdentifiers": {
						"title": "ContentIdentifiers",
						"type": "object",
						"properties": {
							"assetId": {
								"type": "string",
								"description": "Identifies a particular playable asset. For example, the HD version of a particular movie separate from the UHD version."
							},
							"entityId": {
								"type": "string",
								"description": "Identifies an entity, such as a Movie, TV Series or TV Episode."
							},
							"seasonId": {
								"type": "string",
								"description": "The TV Season for a TV Episode."
							},
							"seriesId": {
								"type": "string",
								"description": "The TV Series for a TV Episode or TV Season."
							},
							"appContentData": {
								"type": "string",
								"description": "App-specific content identifiers.",
								"maxLength": 1024
							}
						},
						"description": "The ContentIdentifiers object is how the app identifies an entity or asset to\nthe Firebolt platform. These ids are used to look up metadata and deep link into\nthe app.\n\nApps do not need to provide all ids. They only need to provide the minimum\nrequired to target a playable stream or an entity detail screen via a deep link.\nIf an id isn't needed to get to those pages, it doesn't need to be included."
					}
				}
			},
			"https://meta.rdkcentral.com/firebolt/schemas/intents": {
				"title": "Intents",
				"$id": "https://meta.rdkcentral.com/firebolt/schemas/intents",
				"definitions": {
					"Intent": {
						"description": "A Firebolt compliant representation of a user intention.",
						"type": "object",
						"required": [
							"action",
							"context"
						],
						"properties": {
							"action": {
								"type": "string"
							},
							"context": {
								"type": "object",
								"required": [
									"source"
								],
								"properties": {
									"source": {
										"type": "string"
									}
								}
							}
						}
					},
					"IntentProperties": {
						"type": "object",
						"propertyNames": {
							"enum": [
								"action",
								"data",
								"context"
							]
						}
					},
					"NavigationIntent": {
						"title": "NavigationIntent",
						"description": "A Firebolt compliant representation of a user intention to navigate to a specific place in an app.",
						"anyOf": [
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/HomeIntent"
							},
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/LaunchIntent"
							},
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/EntityIntent"
							},
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/PlaybackIntent"
							},
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/SearchIntent"
							},
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/SectionIntent"
							},
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/TuneIntent"
							},
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/PlayEntityIntent"
							},
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/PlayQueryIntent"
							}
						]
					},
					"LaunchIntent": {
						"description": "A Firebolt compliant representation of a user intention to launch an app.",
						"title": "LaunchIntent",
						"allOf": [
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/Intent"
							},
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/IntentProperties"
							},
							{
								"type": "object",
								"properties": {
									"action": {
										"const": "launch"
									}
								},
								"not": {
									"required": [
										"data"
									]
								}
							}
						],
						"examples": [
							{
								"action": "launch",
								"context": {
									"source": "voice"
								}
							}
						]
					},
					"HomeIntent": {
						"description": "A Firebolt compliant representation of a user intention to navigate an app to it's home screen, and bring that app to the foreground if needed.",
						"title": "HomeIntent",
						"allOf": [
							{
								"title": "HomeIntent",
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/Intent"
							},
							{
								"title": "HomeIntent",
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/IntentProperties"
							},
							{
								"title": "HomeIntent",
								"type": "object",
								"properties": {
									"action": {
										"const": "home"
									}
								},
								"not": {
									"required": [
										"data"
									]
								}
							}
						],
						"examples": [
							{
								"action": "home",
								"context": {
									"source": "voice"
								}
							}
						]
					},
					"EntityIntent": {
						"description": "A Firebolt compliant representation of a user intention to navigate an app to a specific entity page, and bring that app to the foreground if needed.",
						"title": "EntityIntent",
						"allOf": [
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/Intent"
							},
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/IntentProperties"
							},
							{
								"type": "object",
								"required": [
									"data"
								],
								"properties": {
									"action": {
										"const": "entity"
									},
									"data": {
										"$ref": "https://meta.rdkcentral.com/firebolt/schemas/entity#/definitions/Entity"
									}
								}
							}
						],
						"examples": [
							{
								"action": "entity",
								"context": {
									"source": "voice"
								},
								"data": {
									"entityType": "program",
									"programType": "movie",
									"entityId": "el-camino"
								}
							}
						]
					},
					"TuneIntent": {
						"description": "A Firebolt compliant representation of a user intention to 'tune' to a traditional over-the-air broadcast, or an OTT Stream from an OTT or vMVPD App.",
						"title": "TuneIntent",
						"allOf": [
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/Intent"
							},
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/IntentProperties"
							},
							{
								"type": "object",
								"required": [
									"data"
								],
								"properties": {
									"action": {
										"const": "tune"
									},
									"data": {
										"type": "object",
										"required": [
											"entity"
										],
										"additionalProperties": false,
										"properties": {
											"entity": {
												"$ref": "https://meta.rdkcentral.com/firebolt/schemas/entity#/definitions/ChannelEntity"
											},
											"options": {
												"description": "The options property of the data property MUST have only one of the following fields.",
												"type": "object",
												"required": [],
												"additionalProperties": false,
												"minProperties": 1,
												"maxProperties": 1,
												"properties": {
													"assetId": {
														"type": "string",
														"description": "The ID of a specific 'listing', as scoped by the target App's ID-space, which the App should begin playback from."
													},
													"restartCurrentProgram": {
														"type": "boolean",
														"description": "Denotes that the App should start playback at the most recent program boundary, rather than 'live.'"
													},
													"time": {
														"type": "string",
														"format": "date-time",
														"description": "ISO 8601 Date/Time where the App should begin playback from."
													}
												}
											}
										}
									}
								}
							}
						],
						"examples": [
							{
								"action": "tune",
								"data": {
									"entity": {
										"entityType": "channel",
										"channelType": "streaming",
										"entityId": "an-ott-channel"
									},
									"options": {
										"restartCurrentProgram": true
									}
								},
								"context": {
									"source": "voice"
								}
							}
						]
					},
					"PlaybackIntent": {
						"description": "A Firebolt compliant representation of a user intention to navigate an app to a the video player for a specific, playable entity, and bring that app to the foreground if needed.",
						"title": "PlaybackIntent",
						"allOf": [
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/Intent"
							},
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/IntentProperties"
							},
							{
								"type": "object",
								"required": [
									"data"
								],
								"properties": {
									"action": {
										"const": "playback"
									},
									"data": {
										"$ref": "https://meta.rdkcentral.com/firebolt/schemas/entity#/definitions/PlayableEntity"
									}
								}
							}
						],
						"examples": [
							{
								"action": "playback",
								"data": {
									"entityType": "program",
									"programType": "episode",
									"entityId": "breaking-bad-pilot",
									"seriesId": "breaking-bad",
									"seasonId": "breaking-bad-season-1"
								},
								"context": {
									"source": "voice"
								}
							}
						]
					},
					"SearchIntent": {
						"description": "A Firebolt compliant representation of a user intention to navigate an app to it's search UI with a search term populated, and bring that app to the foreground if needed.",
						"title": "SearchIntent",
						"allOf": [
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/Intent"
							},
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/IntentProperties"
							},
							{
								"type": "object",
								"properties": {
									"action": {
										"const": "search"
									},
									"data": {
										"type": "object",
										"required": [
											"query"
										],
										"properties": {
											"query": {
												"type": "string"
											}
										},
										"additionalProperties": false
									}
								}
							}
						],
						"examples": [
							{
								"action": "search",
								"data": {
									"query": "walter white"
								},
								"context": {
									"source": "voice"
								}
							}
						]
					},
					"SectionIntent": {
						"description": "A Firebolt compliant representation of a user intention to navigate an app to a section not covered by `home`, `entity`, `player`, or `search`, and bring that app to the foreground if needed.",
						"title": "SectionIntent",
						"allOf": [
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/Intent"
							},
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/IntentProperties"
							},
							{
								"type": "object",
								"properties": {
									"action": {
										"const": "section"
									},
									"data": {
										"type": "object",
										"required": [
											"sectionName"
										],
										"properties": {
											"sectionName": {
												"type": "string"
											}
										},
										"additionalProperties": false
									}
								},
								"required": [
									"data"
								]
							}
						],
						"examples": [
							{
								"action": "section",
								"data": {
									"sectionName": "settings"
								},
								"context": {
									"source": "voice"
								}
							}
						]
					},
					"PlayEntityIntent": {
						"description": "A Firebolt compliant representation of a user intention to navigate an app to a the video player for a specific, playable entity, and bring that app to the foreground if needed.",
						"title": "PlayEntityIntent",
						"allOf": [
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/Intent"
							},
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/IntentProperties"
							},
							{
								"type": "object",
								"required": [
									"data"
								],
								"properties": {
									"action": {
										"const": "play-entity"
									},
									"data": {
										"type": "object",
										"properties": {
											"entity": {
												"$ref": "https://meta.rdkcentral.com/firebolt/schemas/entity#/definitions/PlayableEntity"
											},
											"options": {
												"type": "object",
												"properties": {
													"playFirstId": {
														"type": "string"
													},
													"playFirstTrack": {
														"type": "integer",
														"minimum": 1
													}
												},
												"additionalProperties": false
											}
										},
										"required": [
											"entity"
										],
										"propertyNames": {
											"enum": [
												"entity",
												"options"
											]
										},
										"if": {
											"properties": {
												"entity": {
													"type": "object",
													"required": [
														"entityType"
													],
													"properties": {
														"entityType": {
															"const": "playlist"
														}
													}
												}
											}
										},
										"then": {
											"type": "object",
											"properties": {
												"options": {
													"type": "object",
													"maxProperties": 1
												}
											}
										},
										"else": {
											"type": "object",
											"properties": {
												"options": {
													"type": "object",
													"maxProperties": 0
												}
											}
										}
									}
								}
							}
						],
						"examples": [
							{
								"action": "play-entity",
								"data": {
									"entity": {
										"entityType": "playlist",
										"entityId": "playlist/xyz"
									},
									"options": {
										"playFirstId": "song/xyz"
									}
								},
								"context": {
									"source": "voice"
								}
							},
							{
								"action": "play-entity",
								"data": {
									"entity": {
										"entityType": "playlist",
										"entityId": "playlist/xyz"
									},
									"options": {
										"playFirstTrack": 3
									}
								},
								"context": {
									"source": "voice"
								}
							}
						]
					},
					"PlayQueryIntent": {
						"description": "A Firebolt compliant representation of a user intention to navigate an app to a the video player for an abstract query to be searched for and played by the app.",
						"title": "PlayQueryIntent",
						"allOf": [
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/Intent"
							},
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/intents#/definitions/IntentProperties"
							},
							{
								"type": "object",
								"required": [
									"data"
								],
								"properties": {
									"action": {
										"const": "play-query"
									},
									"data": {
										"type": "object",
										"properties": {
											"query": {
												"type": "string"
											},
											"options": {
												"type": "object",
												"properties": {
													"programTypes": {
														"type": "array",
														"items": {
															"$ref": "https://meta.rdkcentral.com/firebolt/schemas/entertainment#/definitions/ProgramType"
														}
													},
													"musicTypes": {
														"type": "array",
														"items": {
															"$ref": "https://meta.rdkcentral.com/firebolt/schemas/entertainment#/definitions/MusicType"
														}
													}
												},
												"additionalProperties": false
											}
										},
										"required": [
											"query"
										],
										"propertyNames": {
											"enum": [
												"query",
												"options"
											]
										}
									}
								}
							}
						],
						"examples": [
							{
								"action": "play-query",
								"data": {
									"query": "Ed Sheeran"
								},
								"context": {
									"source": "voice"
								}
							},
							{
								"action": "play-query",
								"data": {
									"query": "Ed Sheeran",
									"options": {
										"programTypes": [
											"movie"
										]
									}
								},
								"context": {
									"source": "voice"
								}
							},
							{
								"action": "play-query",
								"data": {
									"query": "Ed Sheeran",
									"options": {
										"programTypes": [
											"movie"
										],
										"musicTypes": [
											"song"
										]
									}
								},
								"context": {
									"source": "voice"
								}
							}
						]
					}
				}
			},
			"https://meta.rdkcentral.com/firebolt/schemas/lifecycle": {
				"title": "Lifecycle",
				"$id": "https://meta.rdkcentral.com/firebolt/schemas/lifecycle",
				"oneOf": [
					{
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/lifecycle#/definitions/LifecycleState"
					},
					{
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/lifecycle#/definitions/CloseReason"
					}
				],
				"definitions": {
					"LifecycleState": {
						"title": "LifecycleState",
						"description": "The application lifecycle state",
						"type": "string",
						"enum": [
							"initializing",
							"inactive",
							"foreground",
							"background",
							"unloading",
							"suspended"
						]
					},
					"CloseReason": {
						"title": "CloseReason",
						"description": "The application close reason",
						"type": "string",
						"enum": [
							"remoteButton",
							"userExit",
							"done",
							"error"
						]
					}
				}
			},
			"https://meta.rdkcentral.com/firebolt/schemas/localization": {
				"title": "Localization",
				"$id": "https://meta.rdkcentral.com/firebolt/schemas/localization",
				"oneOf": [
					{
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/localization#/definitions/Locality"
					},
					{
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/localization#/definitions/CountryCode"
					},
					{
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/localization#/definitions/Language"
					},
					{
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/localization#/definitions/Locale"
					}
				],
				"definitions": {
					"CountryCode": {
						"type": "string",
						"pattern": "^[A-Z]{2}$"
					},
					"Language": {
						"type": "string",
						"pattern": "^[A-Za-z]{2}$"
					},
					"ISO639_2Language": {
						"type": "string",
						"pattern": "^[a-z]{3}$"
					},
					"Locality": {
						"type": "string"
					},
					"Locale": {
						"type": "string",
						"pattern": "^[a-zA-Z]+([a-zA-Z0-9\\-]*)$"
					}
				}
			},
			"https://meta.rdkcentral.com/firebolt/schemas/advertising": {
				"title": "Advertising",
				"$id": "https://meta.rdkcentral.com/firebolt/schemas/advertising",
				"oneOf": [
					{
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/advertising#/definitions/SkipRestriction"
					}
				],
				"definitions": {
					"SkipRestriction": {
						"title": "SkipRestriction",
						"$comment": "xrn:advertising:policy:skipRestriction:",
						"type": "string",
						"enum": [
							"none",
							"adsUnwatched",
							"adsAll",
							"all"
						],
						"description": "The advertisement skip restriction.\n\nApplies to fast-forward/rewind (e.g. trick mode), seeking over an entire opportunity (e.g. jump), seeking out of what's currently playing, and \"Skip this ad...\" features. Seeking over multiple ad opportunities only requires playback of the _last_ opportunity, not all opportunities, preceding the seek destination.\n\n| Value        | Description                                                                    |\n|--------------|--------------------------------------------------------------------------------|\n| none         |No fast-forward, jump, or skip restrictions                                    |\n| adsUnwatched | Restrict fast-forward, jump, and skip for unwatched ad opportunities only.     |\n| adsAll       | Restrict fast-forward, jump, and skip for all ad opportunities                 |\n| all          | Restrict fast-forward, jump, and skip for all ad opportunities and all content |\n\nNamespace: `xrn:advertising:policy:skipRestriction:`\n\n"
					}
				}
			},
			"https://meta.rdkcentral.com/firebolt/schemas/secondscreen": {
				"title": "SecondScreen",
				"$id": "https://meta.rdkcentral.com/firebolt/schemas/secondscreen",
				"anyOf": [
					{
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/secondscreen#/definitions/SecondScreenEvent"
					}
				],
				"definitions": {
					"SecondScreenEvent": {
						"title": "SecondScreenEvent",
						"description": "An a message notification from a second screen device",
						"type": "object",
						"required": [
							"type"
						],
						"properties": {
							"type": {
								"type": "string",
								"enum": [
									"dial"
								]
							},
							"version": {
								"type": "string"
							},
							"data": {
								"type": "string"
							}
						}
					}
				}
			},
			"https://meta.rdkcentral.com/firebolt/schemas/entity": {
				"$id": "https://meta.rdkcentral.com/firebolt/schemas/entity",
				"title": "Entity",
				"oneOf": [
					{
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/entity#/definitions/Entity"
					},
					{
						"$ref": "https://meta.rdkcentral.com/firebolt/schemas/entity#/definitions/PlayableEntity"
					}
				],
				"definitions": {
					"Entity": {
						"oneOf": [
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/entity#/definitions/ProgramEntity"
							},
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/entity#/definitions/MusicEntity"
							},
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/entity#/definitions/ChannelEntity"
							},
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/entity#/definitions/UntypedEntity"
							},
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/entity#/definitions/PlaylistEntity"
							}
						]
					},
					"ChannelEntity": {
						"title": "ChannelEntity",
						"type": "object",
						"properties": {
							"entityType": {
								"const": "channel"
							},
							"channelType": {
								"type": "string",
								"enum": [
									"streaming",
									"overTheAir"
								]
							},
							"entityId": {
								"type": "string",
								"description": "ID of the channel, in the target App's scope."
							},
							"appContentData": {
								"type": "string",
								"maxLength": 256
							}
						},
						"required": [
							"entityType",
							"channelType",
							"entityId"
						],
						"additionalProperties": false
					},
					"ProgramEntity": {
						"title": "ProgramEntity",
						"oneOf": [
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/entity#/definitions/MovieEntity"
							},
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/entity#/definitions/TVEpisodeEntity"
							},
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/entity#/definitions/TVSeasonEntity"
							},
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/entity#/definitions/TVSeriesEntity"
							},
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/entity#/definitions/AdditionalEntity"
							}
						]
					},
					"MusicEntity": {
						"title": "MusicEntity",
						"type": "object",
						"properties": {
							"entityType": {
								"const": "music"
							},
							"musicType": {
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/entertainment#/definitions/MusicType"
							},
							"entityId": {
								"type": "string"
							}
						},
						"required": [
							"entityType",
							"musicType",
							"entityId"
						]
					},
					"MovieEntity": {
						"title": "MovieEntity",
						"description": "A Firebolt compliant representation of a Movie entity.",
						"type": "object",
						"required": [
							"entityType",
							"programType",
							"entityId"
						],
						"properties": {
							"entityType": {
								"const": "program"
							},
							"programType": {
								"const": "movie"
							},
							"entityId": {
								"type": "string"
							},
							"assetId": {
								"type": "string"
							},
							"appContentData": {
								"type": "string",
								"maxLength": 256
							}
						},
						"additionalProperties": false,
						"examples": [
							{
								"entityType": "program",
								"programType": "movie",
								"entityId": "el-camino"
							}
						]
					},
					"TVEpisodeEntity": {
						"title": "TVEpisodeEntity",
						"description": "A Firebolt compliant representation of a TV Episode entity.",
						"type": "object",
						"required": [
							"entityType",
							"programType",
							"entityId",
							"seriesId",
							"seasonId"
						],
						"properties": {
							"entityType": {
								"const": "program"
							},
							"programType": {
								"const": "episode"
							},
							"entityId": {
								"type": "string"
							},
							"seriesId": {
								"type": "string"
							},
							"seasonId": {
								"type": "string"
							},
							"assetId": {
								"type": "string"
							},
							"appContentData": {
								"type": "string",
								"maxLength": 256
							}
						},
						"additionalProperties": false,
						"examples": [
							{
								"entityType": "program",
								"programType": "episode",
								"entityId": "breaking-bad-pilot",
								"seriesId": "breaking-bad",
								"seasonId": "breaking-bad-season-1"
							}
						]
					},
					"TVSeasonEntity": {
						"title": "TVSeasonEntity",
						"description": "A Firebolt compliant representation of a TV Season entity.",
						"type": "object",
						"required": [
							"entityType",
							"programType",
							"entityId",
							"seriesId"
						],
						"properties": {
							"entityType": {
								"const": "program"
							},
							"programType": {
								"const": "season"
							},
							"entityId": {
								"type": "string"
							},
							"seriesId": {
								"type": "string"
							},
							"assetId": {
								"type": "string"
							},
							"appContentData": {
								"type": "string",
								"maxLength": 256
							}
						},
						"additionalProperties": false,
						"examples": [
							{
								"entityType": "program",
								"programType": "season",
								"entityId": "breaking-bad-season-1",
								"seriesId": "breaking-bad"
							}
						]
					},
					"TVSeriesEntity": {
						"title": "TVSeriesEntity",
						"description": "A Firebolt compliant representation of a TV Series entity.",
						"type": "object",
						"required": [
							"entityType",
							"programType",
							"entityId"
						],
						"properties": {
							"entityType": {
								"const": "program"
							},
							"programType": {
								"const": "series"
							},
							"entityId": {
								"type": "string"
							},
							"assetId": {
								"type": "string"
							},
							"appContentData": {
								"type": "string",
								"maxLength": 256
							}
						},
						"additionalProperties": false,
						"examples": [
							{
								"entityType": "program",
								"programType": "series",
								"entityId": "breaking-bad"
							}
						]
					},
					"PlaylistEntity": {
						"title": "PlaylistEntity",
						"description": "A Firebolt compliant representation of a Playlist entity.",
						"type": "object",
						"required": [
							"entityType",
							"entityId"
						],
						"properties": {
							"entityType": {
								"const": "playlist"
							},
							"entityId": {
								"type": "string"
							},
							"assetId": {
								"type": "string"
							},
							"appContentData": {
								"type": "string",
								"maxLength": 256
							}
						},
						"additionalProperties": false,
						"examples": [
							{
								"entityType": "playlist",
								"entityId": "playlist/xyz"
							}
						]
					},
					"PlayableEntity": {
						"title": "PlayableEntity",
						"anyOf": [
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/entity#/definitions/MovieEntity"
							},
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/entity#/definitions/TVEpisodeEntity"
							},
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/entity#/definitions/PlaylistEntity"
							},
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/entity#/definitions/MusicEntity"
							},
							{
								"$ref": "https://meta.rdkcentral.com/firebolt/schemas/entity#/definitions/AdditionalEntity"
							}
						]
					},
					"AdditionalEntity": {
						"title": "AdditionalEntity",
						"description": "A Firebolt compliant representation of the remaining program entity types.",
						"type": "object",
						"required": [
							"entityType",
							"programType",
							"entityId"
						],
						"properties": {
							"entityType": {
								"const": "program"
							},
							"programType": {
								"type": "string",
								"enum": [
									"concert",
									"sportingEvent",
									"preview",
									"other",
									"advertisement",
									"musicVideo",
									"minisode",
									"extra"
								]
							},
							"entityId": {
								"type": "string"
							},
							"assetId": {
								"type": "string"
							},
							"appContentData": {
								"type": "string",
								"maxLength": 256
							}
						},
						"additionalProperties": false,
						"examples": [
							{
								"entityType": "program",
								"programType": "concert",
								"entityId": "live-aid"
							}
						]
					},
					"UntypedEntity": {
						"title": "UntypedEntity",
						"allOf": [
							{
								"description": "A Firebolt compliant representation of the remaining entity types.",
								"type": "object",
								"required": [
									"entityId"
								],
								"properties": {
									"entityId": {
										"type": "string"
									},
									"assetId": {
										"type": "string"
									},
									"appContentData": {
										"type": "string",
										"maxLength": 256
									}
								},
								"additionalProperties": false
							}
						],
						"examples": [
							{
								"entityId": "an-entity"
							}
						]
					}
				}
			}
		}
	}
}